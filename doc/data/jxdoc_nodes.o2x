<?xml version='1.0' encoding='CP1252' standalone='yes'?>
<!--                 o2xdb table document                -->
<!-- created       : 14.12.2009 20:13:16                 -->
<!-- application   : jxdoc                               -->
<!-- by            : root                                -->
<!-- from          : SQLITE                              -->
<!-- database      :                                     -->
<!-- table         : docnodes                            -->
<rset>
<r><f>1</f><f><![CDATA[OBIETTIVI DEL CORSO]]></f><f><![CDATA[Obiettivi del corso]]></f><f><![CDATA[<ul>
 <li>Conoscere i principi fondamentali di Janox e come ottenerne il miglior
     risultato</li>
 <li>Capire la filosofia di Janox.</li>
 <li>Comprendere a fondo gli standard di Janox.</li>
 <li>Creare un' applicazione con Janox che:</li>
  <ul>
   <li>Ha una completa interfaccia GUI.</li>
   <li>Lavora con database SQL.</li>
   <li>Espone relazione tra tabelle di tipo <em>uno-a-uno</em> e <em>
       uno-a-molti</em>.</li>
   <li>Produce dei report.</li>
   <li>Lavora su Web ed è compatibile con tutti i browser.</li>
  </ul>
 </li>
</ul>
]]></f></r>
<r><f>2</f><f><![CDATA[STRUTTURA DEL CORSO]]></f><f><![CDATA[Struttura del corso]]></f><f><![CDATA[<p>Questo corso si sviluppa in tre giornate e intende insegnare i concetti base e 
la tecnica di programmazione in Janox.</p>
<p>Lo scopo finale è abilitare il programmatore a produrre una semplice 
applicazione. Al termine del corso il programmatore avrà realizzato
un'applicazione di esempio ma avrà affrontato e risolto problemi realiastici.</p>
<p>La filosofia che ci supporta nella presentazione di questo manuale è basata sull'essenza stessa del Janox: pochi elementi ben progettati per affrontare anche le logiche più complesse. L'obiettivo di questo manuale è quello di presentare al
programmatore, con un esempio pratico, la natura e la potenza di questi
strumenti.</p>
]]></f></r>
<r><f>3</f><f><![CDATA[PREREQUISITI FONDAMENTALI PER SEGUIRE IL CORSO]]></f><f><![CDATA[Prerequisiti per affrontare il corso]]></f><f><![CDATA[<p>Nel corso delle lezioni faremo riferimento ad alcuni concetti ed attività che
   potranno richiedere conoscenze specifiche di base: tali conoscenze sono 
   indispensabili per la fruizione del corso.</p>
<h4>Ambiente</h4>
<ul>
 <li>Minima conoscenza inglese tecnico</li>
 <li>Conoscenza delle operazione base sul sistema operativi utilizzato
     (Win32/Linux)</li>
  <ul>
   <li>Navigare nel file-system</li>
    <ul>
     <li>Individuare file e directory</li>
     <li>Copiare, muovere ed eliminare file e directory</li>
    </ul>
   <li>Aprire e muoversi in un file di testo</li>
   <li>Usare e configurare le stampanti</li>
   <li>Installare e disinstallare applicazioni</li>
  </ul>
 <li>Un computer con sistema operativo Windows o Linux su cui installare
     l'applicazione</li>
</ul>

<h4>Programmazione</h4>
<ul> 
 <li>Concetto di <em>funzione</em></li>
 <li>Concetto di <em>evento</em></li>
 <li>Concetto di <em>ciclo (loop)</em></li>
 <li>Concetto di <em>condizione "IF-THEN-ELSE"</em></li>
 <li>Concetto di <em>variabile</em></li>
 <li>Minima esperienza con uno o più linguaggi di programmazione</li>
</ul>

<h4>Database</h4>
<ul>
 <li>Termini:</li>
  <ul>
   <li>Database</li>
   <li>Table (tabella)</li>
   <li>Row / Record (riga)</li>
   <li>Field (campo)</li>
   <li>Index / Key (indice / chiave)</li>
   <li>Segment (segmento)</li>
   <li>Sort (ordinamento)</li>
   <li>Locate (posizionamento)</li>
   <li>Range (filtro)</li>
  </ul>
 <li>Operazioni:</li>
  <ul>
   <li>Creare una tabella</li>
   <li>Modificare la struttura di una tabella</li>
   <li>Eliminare una tabella</li>
   <li>Create un nuovo record in una tabella</li>
   <li>Modificare un record in una tabella</li>
   <li>Eliminare un record in una tabella</li>
  </ul>
</ul>

<h4>Ambiente WEB</h4>
 <ul>
  <li>WEB browser</li>
  <li>WEB server</li>
  <li>Sito WEB</li>
  <li>Indirizzo URL</li>
  <li>HTML</li>
  <li>HTML tag</li>
  <li>JavaScript</li>
  <li>Hyperlink</li>
  <li>Alias / Virtual host</li>
 </ul>
</ol>]]></f></r>
<r><f>4</f><f><![CDATA[O2RUNTIME - UTILIZZARE L'APPLICAZIONE DEMO]]></f><f><![CDATA[Janox Runtime - Utilizzare l'applicazione "demo"]]></f><f><![CDATA[<p>Questo modulo introduce il funzionamento di Janox Runtime, le modalità 
   dell'interfaccia "GUI-like" e gli strumenti di accesso e amministrazione.</p>]]></f></r>
<r><f>5</f><f><![CDATA[OBIETTIVI DI O2RUNTIME - UTILIZZARE L'APPLICAZIONE DEMO]]></f><f></f><f><![CDATA[<ul>
 <li>Eseguire una applicazione Janox.</li>
 <li>Eseguire un programma tramite il menù dell'applicazione.</li>
 <li>Saper distinguere un'interfaccia in modalità <em>screen</em> da una in 
     modalità <em>line</em> (o tabella)</li>
 <li>Navigare sui dati utilizzando i controlli Janox (tabelle, combobox, pulsanti, 
     ecc.)</li>
 <li>Utilizzare il menù "root" per amministrare l'applicazione e la relativa base
     dati.</li>
</ul>]]></f></r>
<r><f>6</f><f><![CDATA[INTRODUZIONE AL CORSO]]></f><f><![CDATA[Introduzione al corso]]></f><f><![CDATA[<p>Il corso "Fondamenti della programmazione con Janox" ha 
l'obiettivo di fornire al programmatore i concetti base della programmazione
in ambiente Janox e tutto il necessario per iniziare a programmare 
con l'interfaccia di sviluppo Janox IDE.</p>]]></f></r>
<r><f>7</f><f><![CDATA[_MANUAL]]></f><f><![CDATA[Fondamenti di Janox]]></f><f><![CDATA[<center>
<br /><br />
<font size="6">Fondamenti di Janox</font>
<br /><br />
<br /><br />
<img src="img/janox.png" />
<br /><br />
<br /><br />
<br /><br />
</center>]]></f></r>
<r><f>8</f><f><![CDATA[INTRODUZIONE AD O2RUNTIME]]></f><f></f><f><![CDATA[<p>Ci sono due modalità di accesso all'applicazione a runtime:</p>
<ol>
 <li>Da developer (sviluppatore)</li>
 <li>Da utente finale</li>
</ol>
<p>Effettuando in login con il campo "Developer" valorizzato si indica alla runtime di Janox che vogliamo attivare anche i servizi di controllo e si fornisce il nome del programmatore.</p>

<p>Il nome del programmatore viene utilizzato da Janox per eseguire i 
programmi modificati dal programmatore stesso ma non ancora confermati 
per tutti.</p>
<p>Questo comportamento è decisamente interessante per testare le modifiche
in un ambiente di sviluppo in team sul progetto, e di confermarle solo dopo averle
verificate.</p>
<img src="img/image003.gif" />
<p>Premere il pulsante <i>Enter</i> per accedere</p>]]></f></r>
<r><f>9</f><f><![CDATA[IL MIO NEGOZIO ONLINE -  L’APPLICAZIONE DI STUDIO]]></f><f><![CDATA["Il mio negozio online" -  L’applicazione di studio]]></f><f><![CDATA[<p>Questo capitolo presenta in dettaglio l'applicazione di studio "Il mio negozio 
online" che tu stesso andrai a sviluppare in modo autonomo andando avanti nel 
corso.</p>
<p>Il fine dell'applicazione e della sua struttura sarà spiegato in questo 
capitolo in modo che sia chiaro al programmatore il significato delle tabelle e 
delle funzioni che l'applicazione prevede.</p>]]></f></r>
<r><f>10</f><f><![CDATA[DESCRIZIONE DELL’APPLICAZIONE DI STUDIO]]></f><f><![CDATA[Descrizione dell’applicazione]]></f><f><![CDATA[
<p>L’applicazione consiste in un sistema per la gestione elettronica degli 
ordini dei propri clienti.</p>
<h4>&quot;Il mio negozio online&quot; - Diagramma relazione tra tabelle</h4>
<img src="img/image004.gif" />]]></f></r>
<r><f>11</f><f><![CDATA[FUNZIONALITÀ DELL'APPLICAZIONE DI STUDIO]]></f><f><![CDATA[Funzionalità]]></f><f><![CDATA[<p>Lo scopo dell'applicazione sta nel memorizzare e manutenere tutte le 
informazioni relative ai clienti, ai prodotti e agli ordini.</p>
<p>L'utente dovrà essere in grado di aggiungere, modificare o eliminare le 
informazioni dalle tabelle "Customers", "Customers_type", "Items", "Orders" e 
"Rows_order".</p>
<p>Inoltre l'utente dovrà essere in grado di stampare una conferma d'ordine 
e di produrre un report mensile dei quantitativi totali ordinati per 
cliente/articolo.</p>]]></f></r>
<r><f>12</f><f><![CDATA[PARADIGMA DI SVILUPPO]]></f><f><![CDATA[o2architect - Paradigma di sviluppo]]></f><f></f></r>
<r><f>13</f><f><![CDATA[INTRODUZIONE AL PARADIGMA DI SVILUPPO]]></f><f></f><f><![CDATA[<p>Questo modulo pone le basi per lo sviluppo di applicazioni in Janox.</p>]]></f></r>
<r><f>14</f><f><![CDATA[OBIETTIVI DI PARADIGMA DI SVILUPPO]]></f><f></f><f><![CDATA[<p>Al termine di questo modulo sarai in grado di:</p>
<ul>
 <li>Spiegare le 4 fasi del processo di sviluppo di una applicazione</li>
 <li>Descrivere la relazione esistente tra modelli, tabelle, programmi, e 
     menu.</li>
 <li>Spiegare il sistema gerarchico degli oggetti che compongono 
     l'applicazione.</li>
</ul>

]]></f></r>
<r><f>15</f><f><![CDATA[LE 4 FASI PER SCRIVERE UN’APPLICAZIONE O2]]></f><f><![CDATA[Le quattro fasi per scrivere un’applicazione Janox]]></f><f><![CDATA[<p>Ogni applicazione Janox è tipicamente formata da quattro fasi:</p>
<ol>
 <li>Models - Definizione dei <em>tipi dato</em> dell'applicazione per 
     l'utilizzo in tabelle e programmi</li>
 <li>Tables – Definizione di tabelle di database ove l'applicazione memorizzerà
     i dati</li>
 <li>Programs – Creare la logica per l'interazione tra l'utente finale e le tabelle
     del database (le funzionalità dell'applicazione)</li>
 <li>Menus – Creare i menu che abilitano l'utente finale ad utilizzare i programmi 
     dell'applicazione</li>
</ol>
<p>Quando si sviluppa una applicazione con Janox può essere di grande aiuto tenere 
   sempre ben presenti queste fasi.</p>
<img src="img/image007.gif" />
<p>Il diagramma a piramide è molto importante per capire le fasi dello sviluppo 
   dell'applicazione. Capire il diagramma renderà più semplice scrivere 
   l'applicazione.</p>
<p>Ogni fase della stesura dell'applicazione è locicamente collegata alla fase 
   successiva.</p>
<p>Il risultato di ogni fase viene memorizzato in un repository (contenitore) - 
   un <i>model repository</i>, un <i>table repository</i>, un <i>program 
   repository</i>, e un <i>menu repository</i>.
]]></f></r>
<r><f>16</f><f><![CDATA[LE FASI DI UN'APPLICAZIONE - FASE 1]]></f><f><![CDATA[Definire i <i>models - datatypes</i>]]></f><f><![CDATA[<p>Un modello è un insieme di proprietà per un certo campo (<i>field</i>).</p>
<p>Ogni volta che si decide di realizzare un'applicazione  in Janox si inizia con la
   definizione di questi modelli. Per semplificarne la successiva identificazione è
   molto meglio dare ai modelli, e agli oggetti che vedremo in seguito, da subito
   nomi significativi.</i>

<h4>Proprietà di un Data-type</h4>
<p>Ogni oggetto dell'applicazione ha delle proprietà. Un modello data-type è
   composto da un insieme di proprietà che vengono ereditate dagli oggetti di più
   alto livello nella piramide dell'applicazione (tables, programs...).</p>
<ul>
 <li><i>Id</i></li>
 <li><i>Type</i> ("Alpha", "Number", "Logical", ecc.)</li>
 <li><i>Mask</i> (Maschera di formattazione I/O del dato)</li>
</ul>

]]></f></r>
<r><f>17</f><f><![CDATA[LE FASI DI UN'APPLICAZIONE - FASE 2]]></f><f><![CDATA[Definire le <i>tables</i>]]></f><f><![CDATA[<p>La seconda fase dello sviluppo di una applicazione consiste nel definire 
le tabelle per l'applicazione. Le colonne di ogni tabella ereditano il loro 
contenuto dai modelli che il programmatore ha definito precedentemente 
nel <i>model repository</i>.</p>
<p>Una tabella è un set di record che hanno la stessa struttura sotto lo 
stesso nome.</i>
<p>Un indice è un criterio di ordinamento dei dati di una tabella.</p>
<p>Una tabella può avere uno o più indici e gli indici devono essere tutti 
univoci.</p>

]]></f></r>
<r><f>18</f><f><![CDATA[LE FASI DI UN'APPLICAZIONE - FASE 3]]></f><f><![CDATA[Creare i <i>programs</i>]]></f><f><![CDATA[<p>La terza fase consiste nella creazione dei programmi che eseguano le 
   logiche dell'applicazione e fungano da interfaccia tra l'utente finale e le
   tabelle del database.</p>
<p>I programmi sono gli strumenti con cui l'utente finale può manipolare i dati ed
   è il programmatore a decidere quali dati e che tipo di manipolazione su essi
   sia permessa.</p>
<p>In Janox non esiste una differenza netta tra programmi <em>online</em>, cioè 
   programmi con un'interfaccia di interazione con l'utente, e programmi 
   cosiddetti <em>batch</em>, cioè procedure con un predefinito flow esecutivo
   e nessuna interfaccia interattiva. Infatti in Janox un singolo programma può 
   mutare aspetto a seconda delle situazioni senza che il programmatore debba
   definirlo in differenti modi.</p>
]]></f></r>
<r><f>19</f><f><![CDATA[LE FASI DI UN'APPLICAZIONE - FASE 4]]></f><f><![CDATA[Creare i <i>menus</i>]]></f><f><![CDATA[<p>Il quarto ed ultimo step consiste nell'associare i programmi alle voci dei menù 
   in modo da permettere all'utente finale di navigare attraverso l'applicazione.</p>
<p>I menu sono lo strumento principale che permette all'utente finale di accedere 
   alle funzionalità dell’applicazione.</p>
]]></f></r>
<r><f>20</f><f><![CDATA[IL MECCANISMO DELLA EREDITARIETÀ]]></f><f><![CDATA[Il meccanismo della <em>ereditarietà</em>]]></f><f><![CDATA[<p>Il diagramma a piramide mostra anche il meccanismo di ereditarietà che 
   esiste tra i repository dei modelli, delle tabelle, e dei programmi:</p>
<img src='img/image009.gif'>
<p>Gli oggetti nelle tabelle e nei programmi ereditano le proprietà definite
   nei modelli su cui sono basati.</p>
<p>Tale meccanismo offre i seguenti benefici al programmatore:</p>
<ol>
 <li>Riduzione dei tempi di sviluppo dell'applicazione. Una volta creato un modello, 
     il programmatore non deve ogni volta definire le proprietà sugli oggetti del 
     suo tipo.</li>
 <li>Manutenzione dell'applicazione semplificata. Una volta associati gli oggetti ai 
     loro modelli, ogni modifica alle proprietà dei modelli è automaticamente 
     ereditata dagli oggetti associati.</li>
</ol>

<h4>Esempio:</h4>
<p>Definendo un modello per il campo "codice_cliente" come alfanumerico 
   lungo 5 caratteri, lo si può utilizzare come campo di tabella o come variabile 
   di programma. Se durante lo sviluppo diventasse necessario variare i campi di 
   questo tipo e portarli a 6 caratteri, basterà variare il modello e il meccanismo 
   di ereditarietà garantirà che tali modifiche abbiano effetto su tutti gli oggetti
   dell'applicazione basati su tale modello.</p>]]></f></r>
<r><f>21</f><f><![CDATA[O2ARCHITECT - PARADIGMA DI SVILUPPO]]></f><f><![CDATA[o2architect - paradigma di sviluppo]]></f><f></f></r>
<r><f>22</f><f><![CDATA[IL REPOSITORY DEI DATATYPES]]></f><f><![CDATA[Il repository dei <i>datatypes</i>]]></f><f><![CDATA[<p>Questo modulo spiega come si opera all’interno del repository dei <i>datatypes</i></p>]]></f></r>
<r><f>23</f><f><![CDATA[OBIETTIVI DI IL REPOSITORY DEI DATATYPES]]></f><f></f><f><![CDATA[<p>Al termine di questo capitolo il programmatore sarà in grado di:</p>
<ul>
<li>Definire un nuovo datatype nel repository</li>
<li>Definire l’attributo del campo</li>
<li>Define la formattazione (<i>mask</i>) del campo</li>
</ul>

]]></f></r>
<r><f>24</f><f><![CDATA[INTRODUZIONE DI IL REPOSITORY DEI DATATYPES]]></f><f><![CDATA[INTRODUZIONE DI IL REPOSITORY DEI DATATYPES]]></f><f><![CDATA[<p>E’ arrivato il momento di iniziare a sviluppare la tua applicazione "Il mio negozio online”.</p>
<p>Come abbiamo visto nei precedenti moduli, ci sono 4 frasi nella definizione di una applicazione: 
nel rispetto di quello che è stato dichiarato il percorso corretto di sviluppo dell’applicazione,
analizzeremo in questo capitolo i modelli di dato di cui avremo bisogno nel corso dell’applicazione.</p>
]]></f></r>
<r><f>25</f><f><![CDATA[CREARE UN NUOVO PROGETTO IN O2ARCHITECT]]></f><f><![CDATA[Creare un nuovo progetto in o2Architect]]></f><f><![CDATA[<img src='img/image011.gif'>]]></f></r>
<r><f>26</f><f><![CDATA[DEFINIRE UN MODELLO NEL MODELS REPOSITORY]]></f><f><![CDATA[Definire un modello di dato nel <i>models repository</i>]]></f><f><![CDATA[<p>Selezioniamo <i>models - datatypes</i> dal <i>navigator menu</i>, e apriamo
quindi il repository dei modelli.</p>
<img src='img/image014.gif'>
<p>Dopo aver preso l’oggetto in check-out (team development) sarà possibile 
aggiungere nuove voci all’elenco base procedendo come descritto sotto:</p>
<ol>
<li>premere  il tasto funzione <kbd>F4</kbd> (create line) o posizionarsi 
       sull’ultima riga della tabella e premere <kbd>FrecciaGiù</kbd></li>
<li>digitare il nome del modello nella colonna <i>Id</i></li>
<li>selezionare la tipologia tramite il tasto funzione <kbd>F5</kbd> (zoom) 
       dalla colonna <i>type</i></li>
      <img src='img/image016.gif'>
<li>indicare la formattazione del campo dalla colonna <i>Mask</i>; di seguito 
       alcuni esempi di utilizzo di <i>mask</i>:</li>

      <table>
      <tr><th>Tipo</th><th>Mask</th><th>Significato</th></tr>
      <tr><td>ALPHA</td><td>C50</td><td>Campo alfanumerico lungo 50 che 
                      accetta sia maiuscole che minuscole</td></tr>
      <tr><td>ALPHA</td><td>U30</td><td>Campo alfanumerico lungo 30 che
                      trasforma sempre il dato inserito in caratteri maiuscoli</td></tr>
      <tr><td>ALPHA</td><td>L30</td><td>Campo alfanumerico lungo 30 che 
                      trasforma sempre il dato inserito in caratteri minuscoli</td></tr>
      <tr><td>NUMBER</td><td>6</td><td>Intero lungo 6</td></tr>
      <tr><td>NUMBER</td><td>$ 8.2</td><td>Valore numerico composto da 
                      indicazione valuta, 8 interi e 2 decimali separati da punto</td></tr>
      <tr><td>LOGICAL</td><td>&nbsp;</td><td>Valore booleano (true/false): 
                      non ha <i>mask</i></td></tr>
      <tr><td>DATE</td><td>-</td><td>Esprime le date nella forma
                      dd-mm-yyyy</td></tr>
      <tr><td>DATE</td><td>/</td><td>Esprime le date nella forma 
                      dd/mm/yyyy</td></tr>
      <tr><td>ALPHA</td><td>U1[Si|No|Forse]</td><td>Campo alfanumerico 
                      lungo 1 carattere maiuscolo che può assumere solo 3 valori: S, N, F. 
                      Le descrizioni estese esposte tra parentesi verranno automaticamente
                      visualizzate all’interno del controllo combobox/listbox</td></tr>
      <tr><td>TIME</td><td>:</td><td>Esprime i time nella forma 
                      hh:mm:ss</td></tr>
      </table>

<li>per eliminare una voce dall’elenco utilizzare il tasto funzione <kbd>F3</kbd>
       (delete line) dopo essersi posizionato sulla riga da eliminare.</li>
</ol>
]]></f></r>
<r><f>27</f><f><![CDATA[REPOSITORY COMPLETO DI TUTTI I MODELLI DEL PROGETTO]]></f><f><![CDATA[Repository completo di tutti i modelli necessari alla realizzazione del progetto]]></f><f><![CDATA[<img src='img/image018.gif'>]]></f></r>
<r><f>28</f><f><![CDATA[IL REPOSITORY DELLE TABELLE]]></f><f><![CDATA[Il repository delle tabelle]]></f><f><![CDATA[<p>Questo capitolo espone la definizione e l’uso del repository delle tabelle.</p>]]></f></r>
<r><f>29</f><f><![CDATA[OBIETTIVI DI IL REPOSITORY DELLE TABELLE]]></f><f></f><f><![CDATA[<p>Al termine di questo capitolo il programmatore sarà in grado di:</p>
<ul>
<li>Definire tabelle nel <i>table repository</i>.</li>
<li>Definire colonne nella tabella utilizzando i modelli.</li>
<li>Definire indici nella tabella.</li>
</ul>

]]></f></r>
<r><f>30</f><f><![CDATA[INTRODUZIONE DI IL REPOSITORY DELLE TABELLE]]></f><f></f><f><![CDATA[<p>Questo capitolo passa oltre la prima fase dello sviluppo dell’applicazione (definizione dei 
modelli), illustrando la definizione delle tabelle nel <i>table repository</i>.</p>
<p>Per definire una Tabella nel repository devi specificare i seguenti parametri:</p>
<ul>
<li>Nome logico della tabella</li>
<li>Nome fisico della tabella nel database</li>
<li>Nome del database in cui la tabella è contenuta</li>
<li>Campi della tabella (columns)</li>
<li>Indici della tabella (indexes)</li>
<li>Segmenti di ogni indice</li>
<li>Indice principale della tabella (primary key)</li>
</ul>
<p>In riferimento al diagramma del database relativo all’applicazione “Il mio negozio online”  precedentemente visto, il  programmatore al termine di questo modulo avrà creato tutte le 
tabelle richieste dall’applicazione.</p>
]]></f></r>
<r><f>31</f><f><![CDATA[DEFINIZIONE DELLE TABELLE NEL REPOSITORY]]></f><f><![CDATA[Definizione delle tabelle nel repository]]></f><f><![CDATA[<p>Il repository delle tabelle consiste in una lista di definizioni di tabella.</p>
<p>La definizione di una tabella in o2architect è molto simile a quella nel database, 
ma non necessariamente identica.</p>
<p>Il <i>table repository</i> in o2architect è usato per definire la struttura delle tabelle, 
e non per crearle nel database. Sarà o2runtime, nel momento in cui un programma viene eseguito 
ed utilizza tabelle che non esistono ancora nel database, in base alla struttura definita, a creare la
tabella nel database.</p>
<p>Ogni tabella è definita in modo completo per le sue colonne, per i suoi indici, e per tutte le proprietà
della tabella stessa (nome, database, indice primario).</p>
<img src='img/image020.gif'>
<ol>
<li>Checkout dell’oggetto <i>tables</i> (<kbd>F11</kbd>)<li>
<li>Creare una nuova riga nel <i>table repository</i> (<kbd>F4</kbd>).</li>
<li>Digitare il nome logico della tabella nella colonna <i>Table</i> (stringa senza spazi)</li>
<li>Digitare il nome fisico della tabella nella colonna <i>Physical name</i> (stringa senza spazi)</li>
<li>Nella colonna <i>Database</i> premere <kbd>F5</kbd> (<i>zoom</i>) e selezionare il 
       database dal repository dei database</li>
</ol>
<p>Questa è la situazione in cui ti dovrai trovare prima di accedere alla definzione delle colonne:</p>
<img src='img/image022.gif'>
]]></f></r>
<r><f>32</f><f><![CDATA[DEFINIZIONE DEI CAMPI DELLA TABELLA]]></f><f><![CDATA[Definizione dei campi della tabella]]></f><f><![CDATA[<p>Adesso dobbiamo definire i campi della tabella accedendo all’area destra del repository:</p>
<img src='img/image024.gif'>
<ol>
<li>Creare una nuova riga del <i>columns repository</i> (<kbd>F4</kbd>).</li>
<li>Digitare il nome del campo nella colonna <i>Field</i> (stringa senza spazi).</li>
<li>Digitare il nome del campo nel database nella colonna <i>Physical name</i> (stringa 
       senza spazi).</li>
<li><kbd>F5</kbd> (<i>zoom</i>) e selezionare il modello dalla colonna <i>Model</i>.</li>
</ol>
<p>Ripetere queste operazioni per tutti i campi della tabella.</p>
<p>A lavoro completato il <i>columns repository</i> per la tabella "Customers" dovrebbe 
presentarsi così:</p>
<img src='img/image026.gif'>
]]></f></r>
<r><f>33</f><f><![CDATA[DEFINIZIONE DEGLI INDICI DELLA TABELLA]]></f><f><![CDATA[Definizione degli indici della tabella]]></f><f><![CDATA[<p>Gli indici sono chiavi che il programmatore dichiara per definire i possibili ordinamenti dei 
record all’interno della tabella, in modo da presentare i valori secondo un certo orinamento e 
per favorire le ricerche su tabelle con molti record.</p>
<p>Definire gli indici come univoci (unique), rende più affidabile l’integrità dei dati. In o2architect 
ogni tabella deve avere almeno un indice e tutti gli indici dichiarati devono essere  univoci. Questo 
è facilmente ottenibile aggiungendo i segmenti della chiave primaria anche agli indici che per 
definizione non sarebbero univoci.</p>
<h4>Vantaggi nell’uso degli indici</h4>
<p>Ricerche veloci:  utilizzando un indice sarà più veloce la ricerca di dati tramite query basata 
sui segmenti dell’indice.</p>
<p>Ordinamento dei dati: utilizzare un indice significa altresì ordinare i dati in base ai segmenti
dell’indice, quindi il programmatore tramite l’uso di questi indici potrà riordinare i dati a seconda 
delle situazioni che gli si presentano.</p>

<p>Adesso dobbiamo definire gli indici della tabella accedendo all’area sottostante del 
repository:</p>
<img src='img/image028.gif'>
<p>Questo elenco contiene le informazione di tutti gli indici della tabella selezionata.</p>
<p>Nella parte sinistra la lista degli indici contenente il nome fisico dell’indice. Nella parte destra
invece abbiamo i segmenti dell’indice selezionato, quindi i campi della tabella che determinano
l’ordinamento.</p>
<p>Per creare un nuovo indice per la tabella seleziona procedere come segue:</p>
<ol>
<li>Creare una nuova riga (<kbd>F4</kbd>).</li>
<li>Digitare il nome dell’indice (stringa senza spazi).</li>
<li>Accedere all’area destra (<i>segments</i>).</li>
<li>Creare una nuova riga (<kbd>F4</kbd>).</li>
<li><kbd>F5</kbd> (<i>zoom</i>) per selezionare il campo della tabella dalla colonna <i>Index segment</i>.</li>
<li>Definire il tipo di ordinamento (<i>Ascending</i> o <i>Descending</i>).</li>
<li>Ripetere i punti 4-5-6 per tutti i segmenti dell’indice selezionato</li>
</ol>
]]></f></r>
<r><f>34</f><f><![CDATA[UTILITY PER LA CONVERSIONE DELLE TABELLE]]></f><f><![CDATA[Utility per la conversione delle tabelle]]></f><f><![CDATA[<p>Qualora il programmatore modifichi la struttura di una tabella, sia aggiungendo campi o indici, 
che modificando la tipologia dei campi o i segmenti di un indice, potrebbe essere necessario un 
intervento anche alla struttura della tabella fisica nel database (se la tabella è già stata creata).</p>
<p>Accedendo all’applicazione a runtime come utente "root" (amministratore di runtime) si avrà
disponibile il menu "root": tramite la voce di menu "tables" si avvia un utility di manutenzione delle
tabelle.</p>
<img src='img/image030.gif'><br />
<img src='img/image032.gif'>
]]></f></r>
<r><f>35</f><f><![CDATA[CONTROLLO (CHECK) DI TUTTE LE TABELLE]]></f><f><![CDATA[Controllo (check) di tutte le tabelle]]></f><f><![CDATA[<p>Al fine di verificare che la struttura delle tabelle definita in o2architect sia compatibile con la struttura fisica nel database, procedere premendo il pulsante <i>Check</i> sotto il gruppo <i>Tables repository</i>.</p>
<img src='img/image034.gif'>
<p>Dopo l’analisi comparirà l’esito nell’area di <i>log</i>:</p>
<img src='img/image036.gif'>
<p>La procedura avverte il programmatore che la tabella "items" presenta colonne nuove in o2architect che non esistono fisicamente nel database.</p>
<p>Adesso sarà opportuno procedere con la verifica della singola tabella "items".</p>

]]></f></r>
<r><f>36</f><f><![CDATA[CONTROLLO (CHECK) DELLA SINGOLA TABELLA]]></f><f><![CDATA[Controllo (check) della singola tabella]]></f><f><![CDATA[<p>Una volta verificato che alcune tabelle presentano delle differenze tra la definizione o2 e 
la definizione fisica nel database è necessario procedere con il check della singola tabella.</p>
<p>Selezionare la tabella da analizzare tramite il listbox in alto a sinistra e procedere premendo
il pulsante <i>Check</i> sotto il gruppo <i>Single table</i>.</p>
<img src='img/image038.gif'>
<p>Al termine dell’analisi o2runtime produce l’elenco delle differenze come segue:</p>
<img src='img/image040.gif'>

]]></f></r>
<r><f>37</f><f><![CDATA[AZIONI IN UTILITY MANUTENZIONE TABELLE]]></f><f><![CDATA[Azioni disponibili sulla tabella]]></f><f><![CDATA[<p>A seguito dell’analisi prodotta da o2runtime circa la compatibilità tra la 
struttura delle tabelle definita in o2architect e quella definita fisicamente nel 
database in uso, il programmatore ha tutti gli strumenti per decidere quale 
azione compiere.</p>
<ol>
<li><i>Drop</i> della tabella</li>
<li><i>Rebuild</i> della tabella</li>
<li><i>Match</i> dei campi e <i>rebuild</i> della tabella</li>
</ol>

<h4><i>Drop</i> della tabella</h4>
<p>Il programmatore premendo il pulsante <i>Drop</i> elimina la tabella dal
database.  In questo modo un successivo accesso ad una funzione dell’applicazione 
da parte dell’utente finale che richieda l’utilizzo di questa tabella provocherà una 
creazione automatica della tabella, sulla base della struttura definita in 2architect.
</p>
<p>E’ evidente che così facendo le eventuali differenze sparirebbero, però utilizzare
questa opzione con cautela e solamente se non esistono record nella tabella, oppure 
se ritenete che i dati in essa contenuti non siano importanti.</p>

<h4><i>Rebuild</i> della tabella</h4>
<p>Premendo il pulsante <i>Rebuild</i> o2runtime modifica la struttura fisica della
tabella, rendendola compatibile con quella o2 e mantenendo integri i dati in essa
contenuti.</p>

<h4><i>Match</i> dei campi e <i>rebuild</i></h4>
<p>Qualora un campo abbia variato il nome fisico è possibile associare le colonne 
prima selezionandole dai listbox in basso a sinistra, poi premendo il pulsante 
<i>Match</i>. Dopo l’associazione procedere con l’operazione <i>Rebuild</i>.
</p>

<img src='img/image042.gif'>
]]></f></r>
<r><f>38</f><f><![CDATA[ESERCIZIO - DEFINIRE TUTTE LE TABELLE]]></f><f></f><f><![CDATA[<p>E’ arrivato il momento di creare le tabelle di cui avremo bisogno per completare 
l’applicazione “Il mio negozio online” (usa il diagramma precedentemente illustrato).</p>
]]></f></r>
<r><f>39</f><f><![CDATA[RIEPILOGO DI TABLES REPOSITORY]]></f><f></f><f><![CDATA[<p>Questo capitolo ha conferito al programmatore gli strumenti necessari per completare 
la seconda fase dello sviluppo di un’applicazione o2: definire tabelle nel <i>tables repository
</i>.</p>
<p>Il <i>tables repository</i> elenca tutte le tabelle dell’applicazione, i rispettivi campi e i 
rispettivi indici.</p>
<p>E’ importante dare un nome significativo alle tabelle e ai campi anche in contraddizione 
con il nome fisico dell’oggetto.</p>
<p>Dopo aver definito i campi procedere con la definizione degli indici.</p>
<p>Definire indici permette rapide ricerche di dati e il riordino degli stessi.</p>
<p>Un indice deve avere uno o più segmenti.</p>
<p>Dopo aver definito gli indici indicare quale è indice primario per la tabella.</p>
]]></f></r>
<r><f>40</f><f><![CDATA[SCRIVERE UN PROGRAMMA SEMPLICE DI INTERAZIONE]]></f><f><![CDATA[Un programma di interazione con i dati di una tabella]]></f><f><![CDATA[<p>Questo capitolo mostra come creare un semplice programma di browsing su una 
tabella.</p>
]]></f></r>
<r><f>41</f><f><![CDATA[OBIETTIVI DI SCRIVERE UN PRG SEMPLICE]]></f><f></f><f><![CDATA[<p>Al termine di questo capitolo il programmatore sarà in grado di:</p>
<ul>
<li>Creare un programma di <em>browsing</em></li>
<li>Navigare all’interno della definizione di una <i>view</i></li>
<li>Impostare la tabella principale (<i>main table</i>) di una <i>view</i></li>
<li>Definire i campi richiesti</li>
<li>Disegnare un’interfaccia di base per navigare sui dati</li>
<li>Controllare la sintassi del programma ed eseguirlo</li>
</ul>

]]></f></r>
<r><f>42</f><f><![CDATA[INTRODUZIONE DI SCRIVERE UN PROGRAMMA SEMPLICE]]></f><f></f><f><![CDATA[<p>Arrivati a questo punto abbiamo definito i modelli e le tabelle per l’applicazione.</p>
<p>In questo capitolo andremo a creare un semplice programma di <em>browsing</em>, 
nel caso specifico un programma per la consultazione, la modifica e l’inserimento dei dati 
nella tabella "Customers_type" e lo faremo ponendo l’attenzione soprattutto su come il 
programma è suddiviso, tralasciando per il momento alcuni dettagli che saranno approfonditi 
nei successivi capitoli.</p>
<p>Il processo si divide in quattro fasi:</p>
<ol>
<li>Definizione della <i>view</i> (vista sul database)</li>
<li>Definizione delle operazioni per l’esecuzione delle azioni di insert, delete, update </li>
<li>Creazione della <i>Form</i> (interfaccia)</li>
<li>Inserimento del programma a menu</li>
</ol>

]]></f></r>
<r><f>43</f><f><![CDATA[I PROGRAMMI]]></f><f><![CDATA[I programmi]]></f><f><![CDATA[<p>Per creare un nuovo programma, selezionare <i>Programs</i> dal menu 
</i>Navigator</i>.</p>
<img src='img/image044.gif'>
<ol>
<li>Posizionarsi su <i>Programs</i> e premere <kbd>INVIO</kbd></li>
<li>Digitare il nome del programma (stringa senza spazi) e confermare</li>
</ol>
<p>Per selezionare un programma, sia quello appena creato che qualsiasi altro già 
presente nel repository dei programmi:</p>
<ol>
<li>Esplodere il menu <i>Programs</i> dal <i>Navigator</i></li>
<li>Selezionare il programma da modificare</li>
<li>Premere <kbd>INVIO</kbd></li>
</ol>
<img src='img/image046.gif'>
<p>Come si può vedere il programma è suddiviso logicamente in 9 aree:</p>
<ol>
<li><i>Program properties</i></li>
<li><i>Parameters</i></li>
<li><i>Variables</i></li>
<li><i>Views</i></li>
<li><i>Forms</i></li>
<li><i>I/O Files</i></li>
<li><i>Protocols</i></li>
<li><i>Actions</i></li>
<li><i>Expressions</i></li>
</ol>
<p>Ogni area a sua volta potrà contenere altre sottoaree che analizzeremo 
approfonditamente andando avanti nel corso. In questa fase ci limiteremo a creare lo 
stretto necessario per raggiungere il nostro obiettivo:</p>
<p>creare un semplice programma di interfaccia con una singola tabella, i 
"Customer_types".</p>

]]></f></r>
<r><f>44</f><f><![CDATA[LE VIEW]]></f><f><![CDATA[Le view]]></f><f><![CDATA[<p>Per creare una nuova view:</p>
<ol>
<li>Selezionare l’area <i>View</i> dal <i>Navigator</i> e premere <kbd>INVIO</kbd></li>
<li>Digitare il nome della view (stringa senza spazi) e confermare</li>
</ol>
<p>Per accedere ad una view, sia a quella appena creata che ad eventuali altre view del 
programma, esplodere la voce <i>View</i> dal <i>Navigator</i> e dopo aver selezionato la 
view interessata premere <kbd>INVIO</kbd> per accedere alla sua definizione.</p>
<img src='img/image048.gif'>

]]></f></r>
<r><f>45</f><f><![CDATA[TABELLE DELLA VIEW]]></f><f><![CDATA[Tabelle della view]]></f><f><![CDATA[<p>Dopo aver creato una nuova view andiamo nell’area <i>Tables in view</i> per dichiarare 
quali tabelle prenderanno parte nella query.</p>
<p>Nel caso specifico aggiungiamo un’unica tabella ("Customer_types") e la dichiariamo 
<i>Main table</i> della view.</p>
<blockquote><p>In questo momento il programmatore non si preoccupi più del dovuto se non
comprende il significato delle altre voci all’interno del repository, saranno abbondantemente 
riprese nei successivi capitoli.</p></blockquote>
<img src='img/image050.gif'>
]]></f></r>
<r><f>46</f><f><![CDATA[CAMPI SELECT E CAMPI CALCULATED]]></f><f><![CDATA[Campi <i>select</i> e campi <i>calculated</i>]]></f><f><![CDATA[<p>Una volta dichiarato la tabella principale della view possiamo accedere nell’area sottostante 
<i>Select and calculated fields</i> per definire quali campi della tabella vogliamo utilizzare 
all’interno di questo programma.</p>
<p>Per aggiungere un nuova riga a questa lista procedere come segue per tutti i campi da 
selezionare:</p>
<ol>
<li>Creare una nuova riga <kbd>F4</kbd></li>
<li><kbd>F5</kbd> (<i>zoom</i>) dalla colonna <i>Type</i> e selezionare il tipo 
       "Select"</li>
<li><kbd>F5</kbd> (<i>zoom</i>) dalla colonna <i>From table</i> e selezionare 
       "Customer_types"</li>
<li><kbd>F5</kbd> (<i>zoom</i>) dalla colonna <i>Field</i> e selezionare il campo della 
       tabella</li>
<li>Confermare la riga (<kbd>FrecciaGiù</kbd>) in modo da attribuire il valore alla colonna 
       <i>Alias</i></li>
<li>Ripetere i punti 2-3-4-5 per tutti i campi della tabella, ottenendo un elenco come 
       questo:</li>
</ol>
<img src='img/image052.gif'>

]]></f></r>
<r><f>47</f><f><![CDATA[PROPRIETÀ DELLA VIEW]]></f><f><![CDATA[Proprietà della view]]></f><f><![CDATA[<p>Ogni view ha un’area, dove definire eventuali proprietà avanzate, a cui si accede 
selezionando dal <i>Navigator</i> l’elemento <i>View Properties</i> sotto la view 
interessata.</p>
<p>Nel nostro caso dobbiamo modificare la proprietà <i>Number of requested 
records</i> ed impostarla ad "1".</p>
<p>Questa proprietà identifica il numero di record che saranno richiesti di volta in volta
al server di database e, nel caso di interfacce di tipo <em>screen</em>, dove viene 
letto un record alla volta, deve essere impostato ad "1" (<i>default</i> = "10").</p>
<blockquote><p>Questi argomenti saranno trattati a fondo nei capitoli successivi</p>
</blockquote>
<img src='img/image054.gif'>
]]></f></r>
<r><f>48</f><f><![CDATA[DEFINIZIONE DI AZIONI E MODIFICA DEI DATI]]></f><f><![CDATA[Definizione di azioni e operazioni di modifica dei dati]]></f><f><![CDATA[<p>Le action (azioni) sono in sostanza tutta la componente esecutiva di un programma 
o2.</p>
<p>Ogni action è composta da una serie di operations (operazioni) che vengono eseguite
da o2runtime nell’ordine in cui sono state definite.</p>
<blockquote><p>In questo momento il programmatore non si preoccupi più del dovuto se non 
comprende il significato delle altre voci all’interno del repository: saranno 
abbondantemente riprese nei successivi capitoli.</p></blockquote>
<p>Per creare una nuova <i>action</i>:</p>
<ol>
<li>Selezionare l’area <i>Actions</i> dal <i>Navigator</i> e premere <kbd>INVIO
       </kbd></li>
<li>Digitare il nome della action (stringa senza spazi) e confermare</li>
</ol>
<p>Per accedere ad una action, sia a quella appena creata che ad eventuali altre action 
del programma, esplodere la voce <i>Actions</i> dal <i>Navigator</i> e, dopo aver 
selezionato la action interessata, premere <kbd>INVIO</kbd> per accedere alla sua 
definizione.</p>
<img src='img/image056.gif'>
<p>Per creare una nuova operazione:</p>
<ol>
<li>Creare una nuova riga nella tabella <i>Operations</i> (<kbd>F4</kbd>)</li>
<li>Selezionare dal combobox l’operatore opportuno (nel nostro caso <i>Recordset</i>)
       </li>
<img src='img/image058.gif'>
<li><kbd>F5</kbd> (<i>zoom</i>) dalla colonna <i>Object</i> per aprire l'interfaccia di 
definizione specifica per l’operatore scelto<br>
<img src='img/image060.gif'>
<br>Nel nostro caso, visto che stiamo definendo l’azione "new_customer_type" sceglieremo
l’opzione "Prepare insert" (prepara il recordset per l’inserimento di un nuovo record)</li>
<li>Conferma della riga (<kbd>FrecciaGiù</kbd>)</li>
</ol>



]]></f></r>
<r><f>49</f><f><![CDATA[ESERCIZIO DI CREAZIONE AZIONI E MODIFICA DEI DATI]]></f><f></f><f><![CDATA[<p>Adesso il programmatore prosegua creando le altre due action necessarie per la 
manutenzione della tabella "Customer_types" ("update_customer_type" e 
"delete_customer_type") ripetendo i passi sopra visti, in modo da ottenere questo 
risultato:</p>

<h4>Operazioni di "update_customer_type"</h4>
<img src='img/image062.gif'>
<h4>Operazioni di "delete_customer_type"</h4>
<img src='img/image064.gif'>
<h4>Riepilogo delle action del programma</h4>
<img src='img/image066.gif'>



]]></f></r>
<r><f>50</f><f><![CDATA[CREAZIONE DELLA FORM]]></f><f><![CDATA[Creazione della form (interfaccia utente)]]></f><f><![CDATA[<p>In questa fase andremo a creare la rappresentazione visuale del programma generato
nelle fasi precedenti.</p>
<p>Per fare questo, il programmatore genererà una form in o2architect che produrrà 
l’interfaccia per l’utente finale.</p>
<blockquote><p>In questo momento il programmatore non si preoccupi più del dovuto se 
non comprende il significato delle altre voci all’interno del repository, saranno 
abbondantemente riprese nei successivi capitoli.</p></blockquote>
<p>Per creare una nuova form:</p>
<ol>
<li>Selezionare l’area <i>Forms</i> dal <i>Navigator</i> e premere <kbd>INVIO</kbd></li>
<li>Accedere alla tabella delle form</li>
<li>Creare una nuova riga <kbd>F4</kbd></li>
<li>Digitare il titolo nella colonna <i>Title</i></li>
<li>Premere il pulsante <i>Design</i> per accedere all’editor visuale delle form</li>
</ol>
<img src='img/image068.gif'>
<p>Il programmatore si trova di fronte una finestra denominata <i>Design form</i> che 
rappresenta lo spazio totale disponibile (la finestra del browser).</p>
<p>Al suo interno:</p>
<ul>
<li>la form "Customer_types" che sarà la form del nostro programma</li>
<li>la palette dei controlli o2</li>
<li>l’<i>Object inspector</i> strumento con il quale si attribuiscono le proprietà ai 
       controlli</li>
</ul>
<p>Il programma che stiamo facendo deve consentire la completa manutenzione della tabella
"Customer_types", per cui devono essere definiti i controlli che accolgano i valori dei campi della 
tabella. Scegliamo dei semplici controlli <i>Edit text</i>.</p>
]]></f></r>
<r><f>51</f><f><![CDATA[AGGIUNGERE CONTROLLI AD UNA FORM]]></f><f><![CDATA[Aggiungere controlli ad una form]]></f><f><![CDATA[<p>Per procedere con l’inserimento dei controlli sulla form procedere come 
segue:</p>
<ol>
<li>Selezionare il controllo dalla palette (nel nostro caso il controllo <i>Edit</i>)
       <br /><img src='img/image070.gif'></li>
<li>Posizionare il controllo sulla form "Customer_types" semplicemente cliccando 
       sul punto voluto
       <br /><img src='img/image072.gif'></li>
<li>Utilizzare adesso l’<i>Object inspector</i> per definire la proprietà <i>Field</i>
       (campo associato al controllo) e selezionare il campo “id” dalla view 
       “customer_types”
       <br /><img src='img/image074.gif'></li>
<li>Ripetere i punti 1-2-3 anche per il campo “description” in modo da ottenere 
       questo risultato:
       <br /><img src='img/image074.gif'></li>
</ol>




]]></f></r>
<r><f>52</f><f><![CDATA[AGGIUNGERE UN NAVIGATORE SU UNA VISTA]]></f><f><![CDATA[Aggiungere un controllo di navigazione sulla vista (<i>DBNavigator</i>)]]></f><f><![CDATA[<p>Procediamo adesso inserendo sulla form un oggetto di tipo <i>DBNavigator
</i>.</p>
<img src='img/image078.gif'>
<p>Questo controllo fornisce all’utente finale la capacità di muoversi all’interno 
del recodset semplicemente cliccando sui bottoni (<i>First row</i> –<i>Previous 
page</i> – <i>Previous row</i> – <i>Next row</i> - <i>Next page</i> - <i>Last 
row</i>)</p>
<p>Proprietà obbligatoria: la <i>View</i>. Impostiamo la proprietà <i>View</i> 
del <i>DBNavigator</i> selezionando la view “customer_types”</p>
<img src='img/image080.gif'>

]]></f></r>
<r><f>53</f><f><![CDATA[AGGIUNGERE DEI PULSANTI DI COMANDO]]></f><f><![CDATA[Aggiungere dei pulsanti di comando]]></f><f><![CDATA[<p>Per scatenare le azioni sul recordset che abbiamo definito nella precedente fase 
dobbiamo inserire sulla form 3 controlli di tipo <i>Button</i>.</p>
<img src='img/image082.gif'>
<p>Dopo aver posizionato l’oggetto <i>Button</i> sul form “Customer types” procedere 
con la definizione delle proprietà al momento indispensabili:</p>
<ul>
<li><i>Caption</i></li>
<li><i>Action</i></li>
</ul>
<p>La proprietà <i>Caption</i> contiene il testo che comparirà sul pulsante; la proprietà
<i>action</i>, invece, il nome dell’azione che sarà invocata al click sul pulsante.</p>
<h4>Esempio: attribuzione delle proprietà <i>Caption</i> e <i>Action</i> al pulsante 
“Elimina”</h4>
<img src='img/image084.gif'>
<p>Ripetere l’operazione per gli altri due pulsanti: “Nuovo” e “Salva” in modo da ottenere 
il seguente risultato:</p>
<img src='img/image086.gif'>



]]></f></r>
<r><f>54</f><f><![CDATA[SALVATAGGIO DEL PROGRAMMA E PUBBLICAZIONE]]></f><f><![CDATA[Salvataggio del programma e pubblicazione]]></f><f><![CDATA[<p>Adesso il programma è terminato: dobbiamo salvarlo e pubblicarlo prima che sia 
possibile inserirlo in un menu.</p>
<h4>Salvataggio modifiche dal <i>Design form</i></h4>
<p>Uscire dal <i>Design form</i> tramite il pulsante di chiusura del form <img 
src='img/image088.gif'> e alla richiesta di salvataggio confermare.</p>
<h4>Pubblicazione del programma</h4>
<p>Dal menu <i>CVS</i> scegliere la voce <i>Check-in</i> (<kbd>F12</kbd>).</p>
]]></f></r>
<r><f>55</f><f><![CDATA[SELECT, CALCULATED, RANGE E VARIABILI DEL PRG]]></f><f><![CDATA[Select, calculated, criteri di range e variabili]]></f><f><![CDATA[<p>Questo capitolo approfondisce le conoscenze del programmatore 
circa la costruzione delle view che è stata solamente accennata nei 
precedenti capitoli.</p>
]]></f></r>
<r><f>56</f><f><![CDATA[OBIETTIVI DI SELECT,  CALCULATED, RANGE...]]></f><f></f><f><![CDATA[<p>Al termine di questo capitolo il programmatore sarà in grado di:</p>
<ul>
<li>Definire le tabelle implicate nella query</li>
<li>Creare campi calcolati attribuendo expression di valorizzazione</li>
<li>Filtrare il recordset in base ai parametri di range</li>
<li>Utilizzare le funzioni di aggregazione (<i>SUM</i>, <i>MAX</i>, 
       <i>MIN</i>, <i>AVG</i>)</li>
<li>Utilizzare gli eventi della view</li>
</ul>

]]></f></r>
<r><f>57</f><f><![CDATA[INTRODUZIONE DI SELECT, CALCULATED, RANGE...]]></f><f></f><f><![CDATA[<p>La creazione di una view in o2architect ha come unico scopo 
quello di definire un <em>dataview</em> con il quale il programma
(tramite le action) o l’utente finale (tramite le form) potranno 
interagire per raggiungere l’obiettivo funzionale.</p>

<p>Ogni programma o2 può contenere una o più view.</p>

<p>Ogni view può essere composta da campi di tabelle diverse e 
residenti su database anche fra loro eterogenei.</p>

<p>Per affrontare in modo efficace gli argomenti di questo capitolo ci 
poniamo come obiettivo quello di realizzare un programma di 
consultazione e ricerca dei clienti, definendo un’ interfaccia di tipo 
<em>line</em> e una serie di campi che l’utente potrà utilizzare per 
ricercare alcuni valori all’interno della view.</p>
]]></f></r>
<r><f>58</f><f><![CDATA[TABLES IN VIEW PER IL PROGRAMMA DI RICERCA]]></f><f><![CDATA[<i>Tables in view</i>]]></f><f><![CDATA[<p>Creiamo un nuovo programma denominato “customers” e al suo interno 
una view denominata appunto “customers”.</p>

<p>Definiamo adesso le tabelle delle view.</p>

Nell'area della view indicata come <i>Tables in view</i> vengono dichiarate 
le tabelle necessarie per la costruzione della query.</p>

<p>Nel nostro caso dobbiamo costruire una query che riporti i valori dalla 
tabella “customers”, quindi dobbiamo aggiungere la tabella “customers” e 
dichiararla <i>Main table</i> della view.</p>

<blockquote><b>Ogni view o2 richiede sempre una e solo una tabella 
dichiarata come <i>Main table</i> o come <i>View</i></b>. (Per quanto 
riguarda il level <i>View</i> tratteremo l'argomento più avanti nel corso).
</blockquote>

<p>Le altre tabelle che eventualmente servano alla definizione della view 
devono obbligatoriamente essere dichiarate di level <i>Link</i>.</p>

<p>Le link consentono di estendere il recordset nel numero di colonne, 
agganciando al recordset principale anche le select derivanti da altre tabelle, 
ma non estendono mai il recordset nel numero di record ritornati. Possono 
tuttavia ridurlo se applicati dei criteri di range.</p>

<p>Vedremo meglio le link più avanti nel corso.</p>

<p>Aggiungiamo al corpo della view le select necessarie (tutte) in modo da 
ottenere il seguente risultato:</p>

<img src='img/image094.gif'>
]]></f></r>
<r><f>59</f><f><![CDATA[CALCULATED IN SELECT,  CALCULATED, RANGE...]]></f><f><![CDATA[I campi calcolati (calculated)]]></f><f><![CDATA[<p>Supponiamo di voler definire una colonna nel recordset contenente 
la concatenazione di stringa dei campi che compongono l’indirizzo, per 
visualizzarli come fossero un unico campo sul database.</p>
<ol>
<li>Aggiungere alle nostre select una nuova riga (<kbd>F4</kbd>)</li>
<li><kbd>F5</kbd> (<i>zoom</i>) dalla colonna <i>Type</i> e scegliamo
       <i>Calculated</i></li>
<li>Digitare il nome del campo nella colonna <i>Alias</i> (stringa senza spazi 
       e di contenuto univoco all’interno della view)</li>
<li><kbd>F5</kbd> (<i>zoom</i>) dalla colonna <i>Init</i> per selezionare
       l’espressione di calcolo (dal repository delle expression)</li>
</ol>]]></f></r>
<r><f>60</f><f><![CDATA[ESPRESSIONI PER SELECT, CALCULATED, RANGE...]]></f><f><![CDATA[Le espressioni (expression)]]></f><f><![CDATA[<p>E’ doveroso, arrivati a questo punto del corso, prima di proseguire,
esprimere per la prima volta il concetto di expression del programma.</p>

<p>All’interno di ogni programma è possibile definire infinite espressioni 
(simili alle funzioni di qualsiasi linguaggio di programmazione). Ogni espressione 
è composta da:</p>
<ol>
<li>Un indice univoco (<i>id</i>) con il quale sarà indicata e utilizzata</li>
<li>Un campo testo (illimitato nel numero di caratteri) denominato <i>Script</i>
       (facoltativo)</li>
<li>Un campo testo (limitato a 255 caratteri) denominato <i>Return</i> e che 
       esprime il valore che l'espressione dovrà ritornare</li>
</ol>

<p>Il <i>Return</i> di una espressione può essere una costante o il risultato di
espressioni valorizzate nello <i>Script</i>, utilizzando funzioni e i valori delle 
variabili del programma. Ovviamente tali valori saranno determinati durante 
l’esecuzione del programma dal modulo o2Runtime.</p>

<p>Ecco alcuni esempi di expression:</p>

<img src='img/image096.gif'>
<ol>
<li>La prima ritornerà sempre la stringa “Costante alfanumerica”</li>
<li>La seconda ritornerà sempre il valore 100</li>
<li>La terza ritornerà il valore del campo “address” all’interno della view 
       “customers” del record selezionato in quel momento</li>
</ol>

<p>Fatta questa premessa dobbiamo creare una nuova expression che riporti la
concatenazione di stringa tra i campi che compongono l’indirizzo del cliente. Per 
fare questo:</p>
<ol>
<li>Dalla scelta <i>Expression</i> creare una nuova riga (<kbd>F4</kbd>)</li>
<li><kbd>F5</kbd (<i>zoom</i>) dalla colonna <i>Return</i> per accedere 
       all’area di <i>Script</i></li>
<li><kbd>F5</kbd> (<i>zoom</i>) dallo script per accedere agli oggetti o2 
       disponibili (campi, proprietà dell’applicazione, ecc.)</li>
<li>Scrivere un’espressione come quella sottostante per farsi ritornare il valore 
       dei campi "address" e "city" concatenati</li>
</ol>

<img src='img/image098.gif'>

<blockquote><b>Attenzione. Lo <i>Script</i> e il <i>Return</i> delle espressioni
o2 deve essere sintassi <em>PHP</em> (per informazioni sul linguaggio <em>
PHP</em> visitare il sito <a href='http://www.php.net'>www.php.net</a>). Questo significa che all’interno delle espressioni o2 possono essere utilizzate liberamente 
le funzioni che il linguaggio <em>PHP</em> mette a disposizione.</b></blockquote>

<p>Dopo la definizione della suddetta expression la nostra view si presenterà nel
seguente formato:</p>

<img src='img/image100.gif'>

<p>Il riferimento “1” nella colonna <i>Init</i> richiama l’expression con id “1” 
appena creata.</p>
]]></f></r>
<r><f>61</f><f><![CDATA[CRITERI DI RANGE (MIN, MAX, NOT, LIKE)]]></f><f><![CDATA[Criteri di range (<i>Min</i>, <i>Max</i>, <i>Not</i>, <i>Like</i>)]]></f><f><![CDATA[<p>Il programmatore può definire una espressione per ogni criterio di range 
su ognuno dei campi selezionati all’interno della view al fine di filtrare il 
recordset.</p>

<p>Le espressioni di range nelle colonne di <i>Range</i> sono l’unico modo 
per definire i criteri di filtro all’interno del dataview completo. Le colonne di 
<i>Range</i> sono quattro:</p>
<ol>
<li><i>Min</i> - valore minimo accettato per il campo</li>
<li><i>Max</i> - valore massimo accettato campo</li>
<li><i>Not</i> - valore che NON deve essere accettato per il campo</li>
<li><i>Like</i> - valori che deve essere contenuto nel campo</li>
</ol>

<p>Ogni riga di select all’interno della View permette l’inserimento nelle celle 
<i>Min</i>, <i>Max</i>, <i>Not</i> e <i>Like</i>, posizionandosi sulla riga, 
quindi sul campo, che vogliamo filtrare e premendo <kbd>F5</kbd> 
(<i>zoom</i>) dalla colonna <i>Min</i> per selezionare l’espressione di filtro.
</p>

<p>Se, a titolo di esempio, volessimo che il nostro programma lavorasse solamente 
con clienti che abbiano un codice ("id") compreso tra il valore "10" e il valore "30"
dovremmo:</p>
<ol>
<li><kbd>F5</kbd> (<i>zoom</i>) dalla colonna <i>Min</i> della riga dell’"id"</li>
<li>Creare una nuova expression (<kbd>F4</kbd>)</li>
<li>Digitare "10" nella colonna <i>Result</i> e selezionare l’expression</li>
<li>Spostarsi nella colonna <i>Max</i></li>
<li><kbd>F5</kbd> (<i>zoom</i>) dalla colonna <i>Max</i> della riga dell’"id"</li>
<li>Creare una nuova expression (<kbd>F4</kbd>)</li>
<li>Digitare "30" nella colonna <i>Result</i> e selezionare l’expression</li>
</ol>

<img src='img/image102.gif'>]]></f></r>
<r><f>62</f><f><![CDATA[VARIABILI DEL PROGRAMMA]]></f><f><![CDATA[Variabili del programma]]></f><f><![CDATA[<p>Appare evidente che i filtri visti fino ad ora risolvano solo una parte del 
problema, cioé quella dei filtri definiti dal programmatore. In molti casi, però,
il programmatore non può definire a priori i valori di range, ma può definire dei 
criteri utilizzando le variabili del programma (<i>variables</i>) che, in fase 
esecutiva, assumeranno dei valori (sia impostati dall’utente finale che dalle 
action stesse del programma).</p>

<p>Ecco un esempio del risultato da ottenere:</p>

<img src='img/image104.gif'>

<p>Oltre ai campi delle view, il programmatore può definire, all’interno di ogni
programma, tutte le variabili locali che ritiene necessarie. Queste variabili sono 
utilizzabili solo all’interno del programma in cui vengono definite.</p>

<p>Dal <i>Navigator</i> selezionare <i>Variables</i></p>

<img src='img/image106.gif'>

<p>Per definire una nuova variabile:</p>
<ol>
<li>Accedere alla tabella e creare una nuova riga (<kbd>F4</kbd>)</li>
<li>Digitare il nome nella colonna <i>Alias</i></li>
<li><kbd>F5</kbd> (<i>zoom</i>) dalla colonna <i>Model</i> per selezionare 
       il modello</li>
</ol>

<p>Procedere adesso autonomamente a definire le variabili che metteremo a 
disposizione dell’utente finale per la ricerca dei clienti, ad esempio:</p>

<img src='img/image108.gif'>

<p>Una volta definito le variabili procedere con la creazione delle espressioni da
utilizzare nelle colonne di range della view. Al termine, la nostra view su "customers" 
si presenterà nel seguente modo:</p>

<img src='img/image110.gif'>

<p>E questo sarà l’elenco delle expression:</p>

<img src='img/image112.gif'>
]]></f></r>
<r><f>63</f><f><![CDATA[CREAZIONE DELLA FORM (TIPO LINE)]]></f><f><![CDATA[Creazione della form (di tipo <em>line</em>)]]></f><f><![CDATA[<p>Creiamo adesso l’interfaccia utente. Come già precedentemente visto, 
accedere all’area <i>Forms</i> dal <i>Navigator</i>.</p>
<ol>
<li>Creare una nuova riga nella tabella delle form (<kbd>F4</kbd>)</li>
<li>Digitare il titolo nella colonna <i>Title</i></li>
<li>Premere il pulsante <i>Design</i> per accedere all'interfaccia di 
       <i>Design form</i></li>
</ol>

<p>Posizionare i controlli sulla form, in particolare utilizzare il controllo
<img src='img/image114.gif'> (<i>Table control</i>)  per impostare i record 
in forma tabellare. Inserendo il controllo <i>table</i> la procedura richiederà 
a quale view associarlo (proprietà obbligatoria).</p>

<p>Il controllo <i>table</i> è un controllo in grado di contenere altri controlli, 
quindi aggiungere i controlli <i>edit</i> all’interno della tabella e associarli ai 
rispettivi campi della view.</p>

<img src='img/image116.gif'>
 
<p>Porre attenzione ai campi all’interno del controllo <i>table</i>. Oltre alla 
proprietà <i>Field</i> è necessario impostare anche la proprietà <i>Parent 
Options</i> che in questo caso raccoglie le proprietà della colonna della tabella.
</p>

<img src='img/image118.gif'>

<p>Per ogni campo all’interno della tabella è necessario definire, attraverso la
proprietà <i>Parent options</i>:</p>
<ol>
<li>La riga in cui verrà visualizzato (<i>Line</i>)</li>
<li>Da quale colonna a quale colonna (<i>From column</i> – <i>To column</i>)
       </li>
<li>L’intestazione di colonna (<i>Label</i>)</li>
</ol>

<p>Gli altri campi sono facoltativi e saranno trattati nei capitoli successivi.</p>



]]></f></r>
<r><f>64</f><f><![CDATA[RELAZIONE UNO-A-UNO - LE LINK]]></f><f><![CDATA[Relazione <em>uno-a-uno</em> - le link]]></f><f><![CDATA[<p>Questo capitolo introduce il programmatore all’uso delle tabelle di <i>Link 
level</i>, che consentono la creazione di una connessione <em>uno-a-uno</em>
tra tabelle di database.</p>
]]></f></r>
<r><f>65</f><f><![CDATA[OBIETTIVI DI RELAZIONE UNO-A-UNO - LE LINK]]></f><f></f><f><![CDATA[<p>Al termine di questo capitolo sarai in grado di:</p>
<ul>
<li>Capire il funzionamento di view con più tabelle tra loro in relazione semplice 
       <em>uno-a-uno</em></li>
<li>Comprendere il meccanismo di ricalcolo dei dati di tabelle di <i>link level</i>
       </li>
<li>Filtrare una view per un campo di una tabella di <i>link level</i></li>
</ul>


 ]]></f></r>
<r><f>66</f><f><![CDATA[I PRG DI SELEZIONE (CALL/GOTO, PARAMS, LOCATE)]]></f><f><![CDATA[I programmi di selezione]]></f><f><![CDATA[<p>Questo capitolo introduce l’utilizzo di programmi di selezione, funzioni che 
abilitano l’utente finale a scegliere valori da una lista.</p>
]]></f></r>
<r><f>67</f><f><![CDATA[OBIETTIVI DI I PROGRAMMI DI SELEZIONE]]></f><f></f><f><![CDATA[<p>Al termine di questo capitolo sarai in grado di:</p>
<ul>
<li>Create una tabella di scelta</li>
<li>Passare e ricevere parametri tra programmi</li>
<li>Capire il concetto di programma di selezione</li>
<li>Posizionarsi su un record della view senza filtrarla (<kbd>Locate</kbd>)</li>
</ul>

]]></f></r>
<r><f>68</f><f><![CDATA[INTRODUZIONE DI I PROGRAMMI DI SELEZIONE]]></f><f></f><f><![CDATA[<p>Un’esigenza comune a molte procedure è quella far interagire più programmi
(cioè unità funzionali distinte) e di scambiare tra loro informazioni. In questo 
capitolo vedremo come invocare l’esecuzione di un programma dall’interno di un 
altro e come scambiare parametri tra loro. In particolare vedremo come realizzare 
un programma che consenta di selezionare un valore da un elenco e di restituirlo al
programma chiamante, allo scopo di valorizzare un campo <em>a scelta 
obbligatoria</em>.<p>

<p>A tale scopo utilizzeremo il programma di consultazione e ricerca dei clienti 
come programma di selezione per recuperare un "codice cliente".</p>
]]></f></r>
<r><f>69</f><f><![CDATA[I PARAMETRI IN ENTRATA]]></f><f><![CDATA[I parametri in entrata]]></f><f><![CDATA[<p>Ogni programma che voglia ricevere informazioni da altri programmi deve 
mettersi nella condizione di accettarle. Ciò viene fatto definendo il numero e il 
tipo (<i>data models</i>) di informazioni accettate nell’elenco dei parametri 
del programma: tali informazioni resteranno disponibili al programma chiamato 
per tutto il tempo della sua esecuzione.</p>

<p>Dal <i>Navigator</i> selezionare <i>Parameters</i>:</p>

<img src='img/image120.gif'>

<p>Per definire un nuovo parametro:</p>
<ol>
<li>Accedere alla tabella e creare una nuova riga (<kbd>F4</kbd>)</li>
<li>Digitare un numero progressivo di <i>Id</i> per il parametro</li>
<li>Digitare un nome significativo</li>
<li><kbd>F5</kbd> (<i>zoom</i>) dalla colonna <i>Model</i> per selezionare 
       il modello</li>
</ol>

]]></f></r>
<r><f>70</f><f><![CDATA[IL RITORNO DEI PARAMETRI]]></f><f><![CDATA[Il ritorno dei parametri]]></f><f><![CDATA[<p>Il ritorno dei parametri è implicito: ovvero, dopo la conclusione del programma
chiamato, il chiamante si troverà i parametri passati <em>by reference</em> 
(vedremo in dettaglio il significato quando parleremo del programma chiamante) 
come valorizzati dal programma chiamato. La valorizzazione dei parametri avviene
tramite l’istruziune di <i>return parameter</i>.</p>

<p>Dall’elenco delle azioni creare una nuova azione di nome "return" che contenga 
un’istruzione di <i>return parameter</i>:</p>

<img src='img/image122.gif'>

<p>Premendo <kbd>F5</kbd> su <i>Arguments</i> accedere alle espressioni e 
inserire il riferimento al "Codice cliente" della vista "customers".</p>
<p>Aggiungere un’istruzione di <i>Close program</i> all’azione "return" per 
terminare il programma e ritornare l’esecuzione al programma chiamante. In questo
modo, all’esecuzione dell’azione "return", il parametro "Customer_id" verrà 
valorizzato con il valore corrente di "Codice cliente", a seconda della selezione 
operata dall’utente sull’interfaccia del programma, e il programma di selezione verrà terminato.</p>
<p>Adesso manca solo di dare la possibilità all’utilizzatore di operare la selezione:</p>

<img src='img/image124.gif'>

<p>Per questo aggiungere un pulsante sulla form a associargli la nostra nuova 
azione di "return".</p>

]]></f></r>
<r><f>71</f><f><![CDATA[IL PASSAGGIO DI PARAMETRI]]></f><f><![CDATA[Il passaggio di parametri]]></f><f><![CDATA[<p>Creiamo un programma (di nome "caller") che contenga una sola variabile 
(di <i>alias</i> "selected_customer") di tipo "customer_id" e che mostri la 
variabile ed un pulsante per chiamare un’azione di nome "selection". Per i vari 
passaggi rimandiamo ai capitoli precedenti.</p>

<img src='img/image126.gif'>

<p>A questo punto definiamo la nostra azione "selection" aggiungendo una 
chiamata al programma "customer" e passando la nostra variabile 
"selected_customer" come parametro.</p>

<img src='img/image128.gif'>

<p>L’istruzione <i>call program</i> prevede di selezionare il programma da 
chiamare e poi, premendo <kbd>F5</kbd> sulla cella <i>Arguments</i>, 
presenta l’interfaccia dei parametri in uscita. I parametri possono essere passati 
in due modi:</p>
<ol>
<li><em>by reference</em> - (Tramite il pulsante <i>Variable</i>) La variabile 
       o il campo della vista da passare viene selezionato dall’elenco dei campi del 
       programma. Al termine del programma chiamato il valore del campo potrà 
       risultare variato.</li>
<li><em>by expression</em> - (Tramite il pulsante <i>Expression</i>) Il valore
       risultante dall’espressione sarà passato e reso disponibile al programma 
       chiamato come valore ma nessuna azione di ritorno è attesa o possibile.</li>
</ol>
<p>Nel nostro caso passeremo la variabile "selected_customer" come riferimento 
(<em> by reference</em>) per consentire il recupero del valore selezionato.</p>


]]></f></r>
<r><f>72</f><f><![CDATA[CALL E GOTO PROGRAM]]></f><f><![CDATA[<i>Call program</i> e <i>Goto program</i>]]></f><f><![CDATA[<p><i>Call program</i> e <i>Goto program</i> servono entrambe per chiamare 
un altro programma ma con una sostanziale differenza:</p>

<p>La <i>Call program</i> mette in attesa il programma chiamante (la cui eventuale 
interfaccia rimane inattiva sullo sfondo) ed esegue il programma chiamato fino alla 
sua conclusione. Al termine del chiamato (che esso preveda o no interazioni con
l’operatore) il programma chiamante riprenderà la propria esecuzione, disponendo 
degli eventuali parametri valorizzati (esecuzione <em>modale</em>).</p>

<p>La <i>Goto program</i> passa l’esecuzione ad altro programma (oppure 
sposta l’indirizzo web del browser all’url indicato) terminando in maniera 
irreversibile l’esecuzione del programma chiamante. Ovviamente l’utilizzo dei 
parametri <em>by reference</em> per una <i>Goto program</i> non può avere 
alcun intento di recupero valore.</p>]]></f></r>
<r><f>73</f><f><![CDATA[L’ISTRUZIONE DI LOCATE]]></f><f><![CDATA[L’istruzione di <i>locate</i>]]></f><f><![CDATA[<p>Se, ad esempio, volessimo ottenere questo effetto: quando il campo
"selected_customer" del programma chiamante ha già un valore, posizionare 
la selezione del programma chiamato sul record che descrive tale valore. 
Ovvero: se inseriamo il valore "3" nel campo e premiamo il pulsante di selezione 
del "Codice cliente", vogliamo che il programma "customer" si apra mostrando il 
record con "id" = "3" come riga corrente.</p>

<p>Questo comportamento lo si ottiene tramite l’istruzione <i>recordset locate</i>:
l’istruzione accetta come parametri i valori di ricerca per ogni campo della tabella
principale e rende corrente il primo record che soddisfi tali valori. Nel caso che nessun
record li soddisfi, la vista si posiziona sul primo record del recordset.</p>

<p><b>Nota bene</b> che l’istruzione di <i>locate</i> semplicemente posiziona 
la vista sul record richiesto, senza operare alcuna variazione né di range né di
ordinamento per il recordset!</p>

<p>Nell’elenco delle azioni creare una nuova azione di nome "locate" e contenente 
un’istruzione di <i>recordset locate</i> sulla vista "customers". Nell’elenco delle
espressioni di locate per campo (<kbd>F5</kbd> sulla cella <i>Arguments</i>) 
inserire un’espressione in corrispondenza del campo id che contenga il riferimento 
al parametro in entrata "1 - Customer_id".</p>

<img src='img/image130.gif'>

<p>Ma quando eseguire la nostra azione? Abbiamo detto che vogliamo che il
programma si apra <em>già posizionato</em> sul giusto record, quindi vogliamo 
che l’azione "locate" sia eseguita ogni volta che chiamiamo il programma 
"customers", prima di presentare l’interfaccia all’utente.</p>

<p>Per questo dobbiamo indicare la nostra azione come <i>Initial action</i> del
programma corrente (per i dettagli vedere la sezione relativa agli eventi). Come
condizione di esecuzione della nostra istruzione di locate mettiamo una expression 
che risolva in "true" se il parametro arriva valorizzato, cioè diverso da "0". Questo
impedirà l’esecuzione dell’istruzione quando tale condizione non si verifichi, cioè 
quando il programma verrà invocato da menu e quindi senza alcun parametro in 
entrata.</p>
]]></f></r>
<r><f>74</f><f><![CDATA[RIEPILOGO DI I PROGRAMMI DI SELEZIONE]]></f><f></f><f><![CDATA[<p>In questo capitolo abbiamo creato un programma di selezione di record in 
una tabella, che accetti un parametro in entrata e lo valorizzi alla pressione di 
un pulsante. Abbiamo poi creato un secondo programma che chiami il primo 
passando una propria variabile come parametro e ne riceva il valore ritornato. 
In fine abbiamo visto come posizionare la vista uno specifico record, senza variare 
i criteri di range e ordinamento per il recordset.</p>

<p>La <i>Call program</i> attende l’esecuzione del programma chiamato, dopo 
di che riprende l’esecuzione del chiamante, mentre la <i>Goto program</i> non 
prevede ritorno dal programma chiamato.</p>

<p>I parametri in uscita possono essere passati come variabili o come espressioni 
per recuperare o meno i valori di ritorno.</p>

<p>I valori dei parametri in entrata sono disponibili al programma come i valori 
delle normali variabili e campi delle viste.</p>

<p>L’istruzione di <i>locate</i> accetta un’espressione per ogni campo per il quale 
si voglia indicare un criterio di posizionamento.</p>

]]></f></r>
<r><f>75</f><f><![CDATA[RELAZIONE UNO-A-MOLTI]]></f><f><![CDATA[Relazione <em>uno-a-molti</em>]]></f><f><![CDATA[<p>In questo capitolo apprenderai il concetto di relazione 
<em>uno-a-molti</em></p>

<p>Imparerai a implementare view e form che presentano dati di tabelle fra loro 
collegate da una relazione di dipendenza di tipo <em>uno-a-molti</em>.</p>

]]></f></r>
<r><f>76</f><f><![CDATA[OBIETTIVI DI RELAZIONE UNO-A-MOLTI]]></f><f></f><f><![CDATA[<p>Al termine del capitolo sarai in grado di:</p>
<ul>
<li>Legare due o più view tra di loro tramite le espressioni di <i>range</i></li>
<li>Definire form con più di un controllo <i>DBNavigator</i> e con più di un 
       controllo <i>DBTable</i></li>
<li>Mantenere l’integrità dei dati attraverso le istruzioni di <i>update</i> dei 
       campi di collegamento in fase di inserimento</li>
</ul>
]]></f></r>
<r><f>77</f><f><![CDATA[GLI EVENTI]]></f><f><![CDATA[Gli eventi]]></f><f><![CDATA[<p>In questo capitolo vedremo i vari eventi disponibili in o2 e come utilizzarli.</p>
]]></f></r>
<r><f>78</f><f><![CDATA[OBIETTIVI DI GLI EVENTI]]></f><f></f><f><![CDATA[<p>Al completamento di questo capitolo sarai in grado di:</p>
<ul>
<li>Individuare ogni tipo di evento</li>
<li>Applicare il meccanismo degli eventi alla logica dei programmi</li>
<li>Scegliere gli eventi in base alle necessità</li>
</ul>

]]></f></r>
<r><f>79</f><f><![CDATA[INTRODUZIONE DI GLI EVENTI]]></f><f></f><f><![CDATA[<p>Gli eventi sono tutti quei momenti in cui l’o2runtime può passare il controllo 
ad un’azione o ad un programma indicati dal programmatore ed hanno due scopi:
</p>
<ol>
<li>Permettere al programmatore di intervenire all’interno di procedure 
       automatizzate (come gli eventi di view di <i>Read new row</i> e <i>Leaving
       modified row</i>)</li>
<li>Permettere al programmatore di indicare le azioni da eseguire a fronte di 
       certi comportamenti dell’operatore (come gli eventi di action per i pulsanti)
       </li>
</ol>
<p>Gli eventi si dividono in 4 categorie in dipendenza degli oggetti su cui sono 
definiti e del tipo di esecuzione che possono invocare.</p>
]]></f></r>
<r><f>80</f><f><![CDATA[GLI EVENTI DI APPLICAZIONE]]></f><f><![CDATA[Gli eventi di applicazione]]></f><f><![CDATA[<p>Gli eventi di applicazione servono a controllare momenti esecutivi 
indipendenti dal programma chiamato e comuni a tutta l’appliazione e sono 
due:</p>

<img src='img/image132.gif'>

<ol>
<li><i>Start program</i>
       <p>Lo <i>Start program</i> serve ad indicare il programma da eseguire
       all’entrata nell’applicazione, cioè immediatamente dopo la funzione di login 
       di convalida dell’utente di scrittura della sessione.</p>
      <p>Tale programma può essere un programma batch di servizio di ambiente, 
      utile a vari scopi: impostare variabili di ambiente, impostare i menu di 
      applicazione, recuperare informazioni dell’utente e scrivere log e statistiche; 
      oppure può essere un programma con interfaccia che dia al via alle esecuzioni 
      in assenza di menu, mostri menu personalizzati, mostri e costituisca la 
      <em>home page</em> del sito, richieda o notifichi informazioni all’utente e 
      quanto altro si voglia eseguire sempre ed una sola volta ad ogni accesso al 
      proprio sito.</p></li>
<li><i>On request program</i>
       <p>L’<i>On request program</i>, invece, deve essere rigorosamente batch 
       per un logico motivo: la sua esecuzione viene invocata ad ogni 
       <em>request</em> da parte dell’utente e, quindi, anche durante le normali
       interazioni richieste dagli altri programmi.</p>
       <p>L’utilizzo di questo evento è da prendersi in considerazione in casi molto
       particolari, ad esempio, qualora si vogliano fare controlli sullo stato della 
       sessione o per risolvere esigenze specifiche di gestione della comunicazione 
       <em>http</em>.</p></li>
</ol>


 ]]></f></r>
<r><f>81</f><f><![CDATA[GLI EVENTI DI PROGRAMMA]]></f><f><![CDATA[Gli eventi di programma]]></f><f><![CDATA[<p>Ad oggi l’o2 prevede un solo evento di programma e cioè la <i>initial 
action</i>.</p>
<p>La <i>initial action</i> è l’azione eseguita automaticamente dal 
programma ogni volta che viene chiamato ed è possibile impostarla 
dall’omonimo campo nella pagina di <i>Program properties</i> del
programma.</p>

<img src='img/image134.gif'>

<p>Come abbiamo visto, tramite questo evento è possibile impostare una 
vista del programma su specifici valori di ricerca ma risulta molto utile anche 
per effettuare controlli e valorizzare variabili all’entrata in un programma con 
interfaccia.</p>

<p>Indispensabile l’utilizzo della <i>initial action</i> per i programmi batch: 
non mostrando alcuna interfaccia all’utente, tali programmi rimangono in 
esecuzione per la durata della loro gerarchia esecutiva, il cui primo passo è 
<em>sempre</em> la <i>initial action</i>, in assenza della quale non eseguono 
alcuna azione.</p>
]]></f></r>
<r><f>82</f><f><![CDATA[GLI EVENTI DI VIEW]]></f><f><![CDATA[Gli eventi di view]]></f><f><![CDATA[<p>Agli eventi di view è possibile collegare 2 azioni del programma che 
contiene la vista, tramite la pagina di <i>View properties</i>:</p>

<img src='img/image136.gif'>
<ol>
<li><i>Action on read new row</i>
       <p>Questa action verrà invocata ogni volta che, ad opera dell’utente o delle 
       logiche esecutive delle azioni, verrà impostata la selezione del record corrente 
       per la vista, prima di eseguire qualunque azione scatenata dai controlli e prima 
       di comporre la form da mostrare all’operatore.</p>
       <p>Questo evento risulta particolarmente utile per sincronizzare il contesto
       visualizzato con i record selezionati nelle viste e per mostrare decodifiche dei 
       dati del recordset. Ad esempio, con questo evento, si possono opportunamente
       valorizzare variabili locali a fronte di valori letti dal record corrente.</p></li>
<li><i>Action on leaving modified row</i>
       <p>L’azione qui indicata sarà automaticamente eseguita ogni volta che si tenterà 
       di impostare la selezione per la vista, abbandonando un record modificato e non
       scritto su database.</p>
       <p>Questo evento è pensato per automatizzare le procedure di salvataggio delle
       modifiche: inserendo un’azione che esegua un’istruzione di <i>record postrow</i>, 
       si otterrà l’effetto di salvare le modifiche apportate dall’operatore, senza che egli 
       lo richieda, ad ogni tentativo di cambio del record corrente.</p>
      <p>Un altro utilizzo può essere quello di assicurare ad una vista la corretta forma 
      dei dati da salvare, prima di scriverli su database, indipendentemente dalle azioni 
      che ne provocheranno le modifiche.</p></li>
</ol>
]]></f></r>
<r><f>83</f><f><![CDATA[GLI EVENTI DI INTERFACCIA]]></f><f><![CDATA[Gli eventi di interfaccia]]></f><f><![CDATA[<p>Gli eventi di interfaccia sono di numero e di forma più varia e servono ad 
indicare le azioni di programma da eseguire a fronte delle varie funzionalità 
offerte dai controlli di interazione con l’utente.</p>

<h4>Il controllo <i>window</i></h4>
<blockquote>
<p>Prevede un solo evento di <i>Close click action</i>, la cui azione viene 
indicata nella pagina di proprietà della form:</p>

<img src='img/image140.gif'>

<p>L’azione qui indicata verrà eseguita quando l’operatore clicca sulla crocetta 
di chiusura della finestra e può essere utile per eseguire azioni all’uscita dal 
programma o per impostare criteri di visibilità per le finestre.</p>
</blockquote>

<h4>I controlli associati a campi (<i>Edit control</i>, <i>List/combo box</i>, 
<i>Check box</i>, <i>Text area</i> e <i>Multi page</i>)</h4>
<blockquote>
<p>Implementano tutti un evento di <i>on change</i>, controllabile tramite 2
proprietà della finestra <i>Object inspector</i>, presente durante la sessione 
di editing della form.</p>

<img src='img/image142.gif'>

<p>La proprietà <i>Action</i> indica l’azione da eseguire a fronte di una 
modifica al valore del controllo: l’azione verrà eseguita al prossimo ritorno al 
server.</p>

<p>La proprietà <i>Submit on change</i> permette di indicare un’espressione 
che, se valutata a "true", forza il ritorno al server quando si abbandoni il controllo 
dopo averlo modificato. Il comportamento, guidato da un <em>javascript</em>, 
è lo stesso che se l’operatore premesse un pulsante di <em>submit</em> ogni 
qualvolta abbia apportato modifiche al controllo: questo permette di aggiornare le 
viste e di eseguire l’azione indicata nella proprietà <i>Action</i> del controllo ad 
ogni modifica del valore.</p>

<p>L’uso delle due proprietà permette di utilizzare gli eventi di <i>on change</i> 
dei controlli associati a campi, in modo da far reagire in maniera dinamiche e
tempestiva il contesto del programma alle eventuali variazioni di valore dei campi 
e delle variabili che si utilizzano: particolarmente utile si dimostra nella validazione 
dei valori inseriti e nell’aggiornamento delle link, delle viste dipendenti e delle viste 
in base a campi di selezione.</p>
</blockquote>

<h4>I controlli <i>button</i> e <i>image</i></h4>
<blockquote>
<p>Implementano l’evento di <em>click</em>, che prevede (proprietà 
<i>Action</i> dell’<i>Object inspector</i>) l’indicazione di un’azione da eseguire
quando l’operatore prema il pulsante sinistro del mouse su tali controlli.</p>

<img src='img/image142.gif'>

<p>L’utilizzo di questo evento è semplice da capire e costituisce la base 
dell’interazione con pulsanti e aree grafiche cliccabili: permette di implementare
facilmente menu di comandi personalizzati e gli effetti interattivi più frequenti di 
ogni applicazione.</p>
</blockquote>
]]></f></r>
<r><f>84</f><f><![CDATA[LE AZIONI]]></f><f><![CDATA[Le azioni]]></f><f><![CDATA[<p>Questo capitolo completa il meccanismo di sviluppo ad eventi.</p>
<p>Vedremo come o2runtime verifichi gli eventi e scateni le azioni.</p>
]]></f></r>
<r><f>85</f><f><![CDATA[OBIETTIVI DI LE AZIONI]]></f><f></f><f><![CDATA[<p>Al termine del capitolo il programmatore sarà in grado di:</p>
<ul>
<li>Definire un’azione</li>
<li>Conoscere il significato di tutti gli operatori o2</li>
<li>Condizionare l’esecuzione delle operazioni</li>
<li>Eseguire azioni per tutti i record di una view</li>
</ul>


 ]]></f></r>
<r><f>86</f><f><![CDATA[INTRODUZIONE DI LE AZIONI]]></f><f></f><f><![CDATA[<p>Le azioni costituiscono la base del modello esecutivo di o2architecture.</p>
<p>Un’azione è costituita da un numero arbitrario di istruzioni (operations).</p>
<p>Le azioni possono invocare l’esecuzione di altre azioni o di programmi e legarsi 
fra loro in catene esecutive che, con la presenza di programmi dotati di interfaccia,
possono estendersi a più interazioni client-server.</p>

<p><b>Ogni catena esecutiva inizia con il verificarsi di un evento</b> (vedi capitolo
relativo).</p>

<p>Il programmatore non deve preoccuparsi della natura degli eventi e delle azioni 
che andrà a mettere in relazione, poiché l’o2runtime si occuperà di creare le condizioni
necessarie all’eseguibilità di ogni istruzione richiesta, rendendo disponibili viste sui 
dati e informazioni provenienti dal client in un unico contesto.</p>
]]></f></r>
<r><f>87</f><f><![CDATA[LE ISTRUZIONI]]></f><f><![CDATA[Le istruzioni]]></f><f><![CDATA[<p>Ogni azione è costituita da un numero variabile di istruzioni, righe della tabella
<i>Operations</i>.</p>

<p>Nella tabella <i>Operations</i> usare i seguenti comandi:</p>

<ul>
<li><kbd>F4</kbd> per creare una nuova riga</li>
<li><kbd>F3</kbd> per cancellare una riga</li>
<li><kbd>F5</kbd> per accedere alle interfacce specifiche nelle celle 
       <i>Object</i>, <i>Arguments</i> e <i>Condition</i></li>
<li><img src='img/image146.gif' /> Il pulsante <i>Move</i> per spostare il blocco 
       di righe da <i>From row</i>
       a <i>To row</i>, dalla loro posizione nell’elenco delle istruzioni alla posizione 
      del cursore.</li>
</ul>

<p>Ogni istruzione inizia con l’indicazione di un operatore esecutivo: premere 
<kbd>SPACE</kbd> o una lettera sulla cella <i>Operator</i> per aprire il combo 
box di scelta dell’operatore.</p>

<p>Si accede alle interfacce specifiche di ogni istruzione premendo <kbd>F5</kbd>
sulle celle <i>Object</i> e <i>Arguments</i>: al momento della creazione di una 
nuova istruzione le interfacce vengono presentate automaticamente allo sviluppatore.
Vedere, di seguito, il dettaglio degli operatori.</p>

<p>Se verrà indicata un’espressione nella cella <i>Condizion</i> (<kbd>F5</kbd> 
per inserire o selezionare dalla lista delle espressioni) per un’istruzione, tale istruzione
verrà eseguita solo se l’espressione sarà valutata a "true". La valutazione
dell’espressione verrà fatta al momento dell’esecuzione dell’istruzione e nel contesto
derivante dalle altre istruzioni. Questo significa che non necessariamente blocchi di
istruzioni con la stessa espressione di <i>Condition</i> verranno eseguiti in blocco.
</p>]]></f></r>
<r><f>88</f><f><![CDATA[GLI OPERATORI]]></f><f><![CDATA[Gli operatori]]></f><f><![CDATA[<p>Gli operatori costituiscono i verbi o metodi dei processi esecutivi. La 
complessità e la portata delle operazioni svolte da ogni istruzione, così come 
l’interfaccia presentata al programmatore, variano a seconda dell’operatore 
selezionato. Vediamo, quindi, i singoli operatori nel dettaglio:</p>

<img src='img/image148.gif' />

]]></f></r>
<r><f>89</f><f><![CDATA[OPERATORE CALL PROGRAM]]></f><f><![CDATA[<i>Call program</i>]]></f><f><![CDATA[<p>L’operatore <i>Call program</i> sospende l’attuale catena esecutiva per 
passare il controllo ad un altro programma: l’esecuzione dell’azione corrente 
verrà ripresa al termine dell’esecuzione del programma chiamato.</p>

<p>Se il programma chiamato è di tipo <em>batch</em> (cioè privo di interfacce 
che richiedano l’interattività dell’operatore) l’esecuzione dell’azione corrente verrà
ripresa prima di ritornare al client, dopo aver esaurito la catena esecutiva scatenata
dalla sua <i>Initial action</i>.</p>

<p>Se, invece, il programma chiamato è dotato di interfaccia, eseguita e conclusa 
la <i>Initial action</i>, la catena esecutiva si arresterà sulla presentazione client
dell’interfaccia e l’esecuzione dell’azione corrente riprenderà solo dopo che 
l’operatore avrà chiuso il programma chiamato.</p>

<p>L’istruzione <i>Call program</i> presenterà due interfacce: la prima è l’elenco 
dei programmi disponibili nell’applicazione da cui scegliere il programma da chiamare; 
la seconda è l’interfaccia di definizione dei paratetri.</p>

<p>Per ulteriori dettagli su questo operatore e sulle tecniche di passaggio di parametri
vedi sezione su <i>Call program</i> e passaggio dei parametri.</p>

]]></f></r>
<r><f>90</f><f><![CDATA[OPERATORE CLOSE PROGRAM]]></f><f><![CDATA[<i>Close program</i>]]></f><f><![CDATA[<p>L’operatore <i>Close program</i> non richiede parametri e serve a terminare
l’esecuzione del programma corrente, interrompendo l’attuale catena esecutiva e
chiudendo tutte le finestre eventualmente aperte.</p>

<p><b>Nota bene</b>: le istruzioni eventualmente presenti nell’azione, successive
all’istruzione di <i>Close program</i>, qualora la <i>condition</i> per questa 
istruzione venga valutata a "true", non saranno eseguite!</p>
]]></f></r>
<r><f>91</f><f><![CDATA[OPERATORE DEBUGGER]]></f><f><![CDATA[<i>Debugger</i>]]></f><f><![CDATA[<p>L’operatore <i>Debugger</i> non richiede parametri e serve ad eseguire il
programma di <em>debugging</em>. Questo operatore si comporta come una 
normale istruzione di <i>Call program</i> al programma "debugger", il quale 
mostrerà all’operatore/sviluppatore una complessa interfaccia, dalla quale sarà 
possibile recuperare informazioni su ogni elemento dell’applicazione, delle viste e 
dei programmi coinvolti nell’attuale catena esecutiva.</p>

<p><b>Nota bene</b>: l’operatore <i>Debugger</i> sarà eseguito solo se l’utente 
è loggato con credenziali di sviluppatore, altrimenti l’istruzione non avrà alcun 
effetto.</p>]]></f></r>
<r><f>92</f><f><![CDATA[OPERATORE EXECUTE ACTION]]></f><f><![CDATA[<i>Execute action</i>]]></f><f><![CDATA[<p>Questo operatore consente di trasferire il controllo ad un’altra azione del 
programma in esecuzione, sospendendo l’esecuzione dell’azione corrente fino 
al termine dell’azione chiamata. L’operatore <i>Execute action</i>, in oltre, 
consente di reiterare l’esecuzione di un’azione in base a due diversi criterî:</p>
<ol>
<li>per ogni record di una vista fino all’esaurimento di tutto il recordset</li>
<li>fino alla valutazione a "true" di un’espressione</li>
</ol>

<img src='img/image150.gif' />

<p>I parametri richiesti sono:</p>
<ul>
<li>L’azione da eseguire, da selezionere dall’elenco delle azioni definite per il
       programma.</li>
<li>La condizione di fine loop (<i>End action</i>), un’espressione che, valutata 
       ad ogni giro del loop, interrompe l’esecuzione se ritorna un valore "true".
       <b>Attenzione</b>: se nessuna condizione di fine viene inserita la condizione 
       è automaticamente impostata a "true", il che significa che l’azione verrà 
       eseguita una sola volta!</li>
<li>La vista su cui eseguire il loop (<i>Loop on view</i>) e la direzione 
       (<i>Direction</i>).</li>
</ul>
<p>Quando una vista viene specificata (premendo <kbd>F5</kbd> sul campo 
<i>Loop on view</i> si accede all’elenco e alla selezione delle viste disponibili)
o2runtime svolgerà le seguenti operazioni:</p>
<ol>
<li>La vista selezionata verrà posizionata sul primo (<i>Direction</i> = 
       "ascending") o sull’ultimo (<i>Direction</i> = "Descending") record del 
       recordset.</li>
<li>Ad ogni giro del loop verrà valutata la condizione di fine e, fino al suo verificarsi, 
       il puntatore di selezione della vista verrà fatto avanzare (o retrocedere) fino 
       al totale esaurimento del recordset.</li>
<li>Ad ogni giro del loop verrà eseguita l’azione indicata.</li>
</ol>

<p>Al verificarsi della condizione di <i>End action</i> o all’esaurirsi del recordset
l’istruzione di <i>Execute action</i> sarà terminata.</p>

<p><b>Nota bene</b>: è importante che le condizioni indicate si risolvano sempre 
in un esito, cioè non creino loop infiniti. Ad esempio: un’istruzione di <i>Execute 
action</i> senza indicazione di view e con condizione di fine che valuti sempre a 
"false" creerà un loop infinito, così come un’azione che, reiterata su una vista fino 
al suo esaurimento, ogni volta ne ripristini il puntatore di selezione.</p>
]]></f></r>
<r><f>93</f><f><![CDATA[OPERATORE GOTO]]></f><f><![CDATA[<i>Goto</i>]]></f><f><![CDATA[<p>L’istruzione <i>Goto</i> termina in maniera irreversibile l’attuale catena 
esecutiva e chiude tutti i programmi eventualmente aperti. Il controllo viene 
passato ad un nuovo programma (dalla cui <i>Initial action</i> partirà la nuova 
catena esecutiva) o ad un indirizzo web (url) che solitamente condurrà l’operatore 
fuori dalla sessione o2.</p>

<p>L’interfaccia chiederà di selezionare tra i due possibili esiti (<i>Program</i> 
o <i>Url</i>).</p>

<p>Nel caso di <i>Url</i> sarà possibile inserire nella cella <i>Arguments</i>
un’espressione il cui risultato sarà usato come indirizzo web, così come lo si 
scriverebbe nella barra degli indirizzi di un browser.</p>

<p>Nel caso di <i>Program</i> sarà possibile scegliere il programma fra quelli 
definiti nell’applicazione o inserire un’espressione, il cui risultato sarà interpretato 
come nome del programma da eseguire. Sarà possibile passare parametri al 
programma chiamato ma senza attenderne ritorno.</p>
]]></f></r>
<r><f>94</f><f><![CDATA[OPERATORE INPUT/OUTPUT]]></f><f><![CDATA[<i>Input/output</i>]]></f><f><![CDATA[<p>L’istruzione <i>Input/Output</i> permette di produrre file <em>XML</em> 
a partire dai dati delle viste.</p>
]]></f></r>
<r><f>95</f><f><![CDATA[OPERATORE MESSAGE]]></f><f><![CDATA[<i>Message</i>]]></f><f><![CDATA[<p>L’operatore <i>Message</i> permette di visualizzare un messaggio al client. 
Il messaggio può essere di due tipi, fra cui l’interfaccia chiederà di scegliere:</p>
<ol>
<li><i>Message box</i>: il messaggio sarà comunicato al client come 
       <code>alert</code> di <em>javascript</em>, cioè una finestra modale con 
       un solo pulsante di <i>Ok</i> e con il testo del messaggio. Se più messaggi 
       verranno inviati al client in una stessa sessione esecutiva del server, verranno
       visualizzati uno di seguito all’altro, nell’ordine in cui sono stati invocati.</li>
<li><i>Status bar</i>: il testo del messaggio comparirà nella barra di stato (se 
       visibile) della form attiva. Nel caso che più messaggi di questo tipo vengano 
       inviati al client, soltanto l’ultimo sarà visibile all’operatore.</li>
</ol>
<p>Il messaggio è la stringa risultante dall’espressione indicata in 
<i>Arguments</i>.</p>
]]></f></r>
<r><f>96</f><f><![CDATA[OPERATORE PRINT]]></f><f><![CDATA[<i>Print</i>]]></f><f><![CDATA[<p>Produce un file <em>PDF</em>, a partire da una serie di file <em>XML</em>
prodotti dalle istruzioni di <i>Input/output</i>.</p>
]]></f></r>
<r><f>97</f><f><![CDATA[OPERATORE RECORDSET]]></f><f><![CDATA[<i>Recordset</i>]]></f><f><![CDATA[<p>L’operatore <i>Recordset</i> rende disponibili una serie di funzionalità sulle 
viste del programma.</p>
<img src='img/image152.gif' />

<p>Vediamole in dettaglio:</p>
<ul>
<li><i>First</i>: posiziona la vista sul primo record del recordset e con il
                  puntatore di selezione a zero (primo record della vista).</li>
<li><i>Previous page</i>: mantiene il puntatore di selezione inalterato e sposta 
                          la vista indietro, di un numero di record uguale alle
                          righe richieste per la vista o, se non ci sono, si 
                          comporta come <i>First</i>.</li>
<li><i>Previous row</i>: sposta il puntatore di selezione della vista sul record
                         precedente oppure, se quello attuale è il primo della
                         vista, si comporta come <i>Previous page</i> e poi sposta
                         il puntatore di selezione all’ultimo record della 
                         vista.</li>
<li><i>Next row</i>: sposta il puntatore di selezione della vista sul record
                     successivo oppure, se quello attuale è l’ultimo della vista,
                     si comporta come <i>Next page</i> e poi sposta il puntatore 
                     di selezione al primo record della vista.</li>
<li><i>Next page</i>: mantiene il puntatore di selezione inalterato e sposta la
                      vista avanti, di un numero di record uguale alle righe 
                      richieste per la vista o, se non ci sono, si comporta come
                      <i>Last</i>.</li>
<li><i>Last</i>: posiziona la vista sull’ultimo record del recordset e con il
                 puntatore di selezione uguale al numero di righe richieste per 
                 la vista – 1 (ultimo record della vista).</li>
<li><i>Locate</i>: posiziona la vista sul primo record che soddisfi i criteri.</li>
<li><i>Prepare insert</i>: pone la vista in stato di inserimento, cioè su un 
                           record puramente virtuale, con i campi tutti 
                           valorizzati al proprio default; nel caso che a questa
                           operazione non segua un’operazione di <i>Postrow</i>, 
                           il record virtuale andrà perduto al primo spostamento
                           del puntatore di selezione della vista.</li>
<li><i>Post row</i>: se il record corrente ha subito modifiche, scrive tali 
                     modifiche su database. Prima di eseguire la scrittura viene 
                     fatto il seguente controllo sui valori dei segmenti di chiave:
    <ul>
        <li>Se viene modificata la chiave e la nuova chiave non esiste, al record
            viene modificata la chiave.</li>
        <li>Se viene modificata la chiave e la nuova chiave già esiste, si risolve
            in errore di <i>chiave duplicata</i>.</li>
        <li>Se si è in inserimento e la nuova chiave non esiste, il record viene
            inserito.</li>
        <li>Se si è inserimento e la nuova chiave già esiste, si risolve
            in errore di <i>chiave duplicata</i>.</li>
    </ul></li>
<li><i>Delete row</i>: cancella fisicamente il record corrente dal database.</li>
<li><i>Undo</i>: annulla le eventuali modifiche apportate al record corrente e
                 valorizza ogni campo all’ultimo valore letto dal database.</li>
<li><i>Refresh</i>: rilegge la vista attuale dal database, caricandone le 
                    eventuali modifiche apportate da altri programmi o 
                    operatori.</li>
</ul>]]></f></r>
<r><f>98</f><f><![CDATA[OPERATORE REMARK]]></f><f><![CDATA[<i>Remark</i>]]></f><f><![CDATA[<p>L’operatore <i>Remark</i> consente di inserire un commento fra le varie 
istruzioni di un’azione, al fine di inserire note per la manutenzione, ottenere aspetti 
grafici che aiutino la lettura e quant’altro serva allo sviluppatore: questa istruzione 
non ha alcun effetto di runtime. Per accedere al testo della nota premere 
<kbd>F5</kbd> sulla cella <i>Object</i>.</p>
]]></f></r>
<r><f>99</f><f><![CDATA[OPERATORE RETURN PARAMETER]]></f><f><![CDATA[<i>Return parameter</i>]]></f><f><![CDATA[<p>Valorizza un parametro del programma, in modo da restituire un valore al 
programma chiamante: a tal fine il parametro deve essere passato <em>by 
reference</em> (vedi sezione sul passaggio di parametri).</p>

<p><kbd>F5</kbd> sulla cella <i>Object</i> per selezionare il parametro dall’elenco 
dei parametri definiti e <kbd>F5</kbd> sulla cella <i>Arguments</i> per impostare
l’espressione di valore.</p>
]]></f></r>
<r><f>100</f><f><![CDATA[OPERATORE SET MENU]]></f><f><![CDATA[<i>Set menu</i>]]></f><f><![CDATA[<p>Imposta il menu selezionato dall’elenco (<kbd>F5</kbd> sulla cella <i>Object</i>)
come menu di applicazione, ovvero lo rende visibile come barra dei menu, mentre ogni 
suo sottomenu sarà accessibile come menu a tendina.</p>
]]></f></r>
<r><f>101</f><f><![CDATA[OPERATORE UPDATE]]></f><f><![CDATA[<i>Update</i>]]></f><f><![CDATA[<p>Le istruzioni di <i>Update</i> costituiscono in o2 il modo di assegnare un 
valore ad un campo o ad una variabile. A seguito di un’istruzione <i>Update</i> 
il campo indicato (<kbd>F5</kbd> sulla cella <i>Object</i>) prenderà il valore 
ritornato dall’espressione di valore (<kbd>F5</kbd> sulla cella <i>Arguments</i>).
</p>

<p><b>Nota bene</b>: non lasciarsi ingannare dal nome dell’operatore. Se si 
esegue un’istruzione di <i>Update</i> sul campo di una vista, la modifica non sarà
comunicata al database (e quindi non sarà scritta in effettiva su disco) fino alla 
successiva istruzione di <i>Recordset Postrow</i>. Prima di allora l’esecuzione si 
può interrompere (<i>Close program</i> o <i>Goto</i>) oppure può cambiare il
puntatore di selezione della vista o intervenire azioni di <i>Recordset Undo</i>: in
ognuno di questi, e in altri casi, le modifiche apportate ai campi con le istruzioni 
<i>Update</i> non verranno riportate su database.</p>
]]></f></r>
<r><f>102</f><f><![CDATA[OPERATORE EXECUTE SCRIPT]]></f><f><![CDATA[<i>Execute script</i>]]></f><f><![CDATA[<p>L’istruzione <i>Execute script</i> accetta come solo parametro 
(<kbd>F5</kbd> sulla cella <i>Arguments</i>) un’espressione da valutare. 
Il valore di ritorno dell’espressione viene ignorato ma la sua valutazione 
costituisce il metodo di base per l’esecuzione di <em>script PHP</em>.</p>

<p>Quindi, solitamente, l’espressione avrà una forma del tipo:</p>

<img src='img/image154.gif' />
]]></f></r>
<r><f>103</f><f><![CDATA[L'EDITOR DELLE FORM]]></f><f><![CDATA[L'editor delle form]]></f><f><![CDATA[<p>Questo capitolo ti insegna come disegnare le Form in o2architect.</p>]]></f></r>
<r><f>104</f><f><![CDATA[OBIETTIVI DI L'EDITOR DELLE FORM]]></f><f></f><f><![CDATA[<p>Al termine del capitolo il programmatore sarà in grado di:</p>
<ul>
<li>Posizionare i controlli sulle form</li>
<li>Usare l’<i>Object inspector</i></li>
<li>Velocizzare il design utilizzando i comandi del menu contestuale</li>
<li>Modificare le proprietà dei controlli</li>
<li>Disegnare sia programmi di tipo <em>screen</em> che di tipo <em>line</em>
      </li>
</ul>

]]></f></r>
<r><f>105</f><f><![CDATA[EXPORT VERSO XML]]></f><f><![CDATA[Export verso <em>XML</em>]]></f><f><![CDATA[<p>Questo capitolo pone le basi per la generazione di report in o2architect.
Infatti il primo step per una generazione di un report <em>PDF</em> in 
o2architect consiste nella produzione di archivi di tipo <em>XML</em>.</p>

<p>Questi archivi verranno successivamente confezionati tramite l’istruzione 
<i>Print</i> e inviati all’applicazione o2reporter (argomento trattato 
successivamente).</p>
]]></f></r>
<r><f>106</f><f><![CDATA[OBIETTIVI DI EXPORT VERSO XML]]></f><f></f><f><![CDATA[<p>Al termine del capitolo il programmatore sarà in grado di:</p>
<ul>
<li>Definire i file nel repository </i>I/O</i></li>
<li>Definire i protocolli di trasmissione <em>XML</em></li>
<li>Utilizzare l’operatore <i>I/O</i> per esportare il set di dati</li>
</ul>



]]></f></r>
<r><f>107</f><f><![CDATA[INTRODUZIONE DI EXPORT VERSO XML]]></f><f></f><f><![CDATA[<p>Il linguaggio <em>XML</em> (<em>eXtensible Markup Language</em>)  
è un linguaggio di markup aperto e basato su testo che fornisce informazioni di 
tipo strutturale e semantico relative ai dati veri e propri. Questi "dati sui dati", 
o metadati, offrono un contesto aggiuntivo all’applicazione che utilizza i dati e 
consentono un nuovo livello di gestione e manipolazione delle informazioni basate 
su web.</p>

<p>Attualmente è considerato lo strumento ideale per lo scambio di informazioni 
fra sistemi informativi eterogenei. I dati memorizzati in un file <em>XML</em>
rispettano una struttura definita all’interno del file stesso e di semplice interpretazione.
In questo capitolo vedremo come esportare i dati disponibili in un programma o2 
verso uno o più file <em>XML</em>.</p>

<p>Per produrre un file <em>XML</em> con o2architect è opportuno seguire 3 
fasi:</p>
<ol>
<li>Definire nell’area <i>I/O</i> del programma i file <em>XML</em> che saranno
       generati, indicandone un alias e un’espressione che ne definisca il nome fisico di
       memorizzazione</li>
<li>Definire i <i>Protocols</i> e per ogni <i>protocol</i> l’elenco dei campi che si
       intende esportare sotto lo stesso nome di protocollo.</li>
<li>Utilizzare l’operatore <i>I/O</i> all’interno delle action al fine di esportare i 
       valori correnti del set di dati definito nel <i>Protocol</i> accodandoli al file 
       <em>XML</em> specificato come <i>I/O</i></li>
</ol>

<p>In questo capitolo vedremo come realizzare un programma che generi un file 
<em>XML</em> contenente l’anagrafica dei clienti.</p>
]]></f></r>
<r><f>108</f><f><![CDATA[DEFINIZIONE DI I/O]]></f><f><![CDATA[Definizione di <i>I/O</i>]]></f><f><![CDATA[<p>Dopo aver definito la view e i relativi campi necessari allo scopo passiamo 
alla definizione della risorsa <i>I/O</i>.</p>
<p>Dal menu di navigazione all’interno del programma scegliere la voce <i>I/O 
Files</i> per accedere all’elenco delle risorse <em>input/output</em> disponibili 
per il programma.</p>

<img src='img/image156.gif' />

<ol>
<li>Creare una nuova voce in elenco (<kbd>F4</kbd>)</li>
<li>Digitare il nome della risorsa (testo senza spazi o caratteri speciali)</li>
<li>Selezionare l’espressione che ne definisce il nome fisico (nel nostro caso
       "customers.xml")</li>
</ol>
<p>Il file sarà prodotto a partire dalla directory <var>tmp</var> dell’utente 
corrente: <var>[app_root]/users/[user_name]/tmp/</var></p>
]]></f></r>
<r><f>109</f><f><![CDATA[DEFINIZIONE DEL PROTOCOL]]></f><f><![CDATA[Definizione del <i>Protocol</i>]]></f><f><![CDATA[<p>Definire un protocollo significa raggruppare sotto lo stesso nome un elenco di 
campi che intendiamo esportare.</p>
<p>Dal menu di navigazione accedere alla voce <i>Protocols</i> e premere <kbd>ENTER</kbd>. Si accede all’area <i>Protocols</i> del programma: nella parte 
alta una griglia con i nomi dei protocolli; in basso, per ogni protocollo, l’elenco dei 
campi con il relativo alias <em>XML</em> che saranno oggetto di esportazione.
La colonna <i>Models</i> permette di definire un modello di dato per l'esportazione
diverso dal modello definito per il campo; è necessario solo in caso di esportazione di un campo di tipo <i>calculated</i>, che come forse il lettore avrà notato è l’unica 
variabile che non comporta una definizione di <i>model</i>.</p>

<img src='img/image158.gif' />]]></f></r>
<r><f>110</f><f><![CDATA[UTILIZZO DELL’OPERATORE I/O]]></f><f><![CDATA[Utilizzo dell’operatore <i>I/O</i>]]></f><f><![CDATA[<p>Dopo aver definito <i>I/O files</i> e <i>Protocols</i> l’accodamento dei 
valori nel file <em>XML</em> viene eseguito da o2runtime quando incontra 
un’istruzione di <i>I/O</i> definita all’interno di una action.</p>

<p>Definiamo una action ("esporta_riga") che esporterà i valori correnti del 
protocollo e all’interno inseriamo un’istruzione di <i>I/O</i>.</p>

<img src='img/image160.gif' />

<p>L’istruzione di <i>I/O</i> presenta 3 opzioni:</p>
<ol>
<li><i>Type</i>: identifica il tipo di esportazione e può assumere due valori: 
       <ol>
       <li><i>Definition</i>: saranno accodati al file <em>XML</em> i dati di 
              definizione del protocollo, quindi nome dei campi e tipologia</li>
       <li><i>Line</i>: saranno accodati i valori dei campi del protocollo (in questo 
              caso la prima volta o2runtime esporta anche la definizione della struttura)
              </li>
       </ol></li>
<li><i>Output protocol</i>: selezionare dall’elenco dei <i>Protocols</i> del 
       programma il protocollo che si intende esportare</li>
<li><i>I/O file</i>: selezionare dall’elenco degli <i>I/O files</i> del programma 
       la risorsa di <em>output</em> su cui si intende accodare i dati</li>
</ol>

<p>Adesso non rimane altro che invocare l’esecuzione della action "esporta_riga" 
per ogni record della view "customers". Per fare questo è necessario creare un’altra
action (ad esempio "esporta") che richiami la action "esporta_riga" tramite 
l’istruzione <i>Execute action</i>, utilizzando l’opzione <i>Loop on View</i></p>

<img src='img/image162.gif' />

<p>In o2architect l’istruzione <i>Execute action</i> è l’unico metodo che il
programmatore ha per invocare l’esecuzione di un’azione in modo ciclico (loop). 
Ricordarsi di inserire una expression = "false" come espressione di fine azione 
(<i>End action</i>) in modo che l’azione "esporta_riga" venga ripetuta per tutti 
i record della view "customers".</p>
<p>Mandare in esecuzione l’azione “esporta” utilizzando un qualsiasi evento 
preposto e il file <em>XML</em> “customers.xml” sarà generato nella directory
temporanea dell’utente loggato.</p>
]]></f></r>
<r><f>111</f><f><![CDATA[GENERAZIONE DI REPORT PDF DA FILE XML]]></f><f><![CDATA[Generazione di report <em>PDF</em> da file <em>XML</em>]]></f><f><![CDATA[<p>Questo capitolo ha come scopo quello di abilitare il programmatore alla 
produzione di report in formato <em>PDF</em>. Questi report hanno come fonte 
dati un set di file <em>XML</em> e come <em>template</em> un documento 
prodotto dal reporter (o2Reporter).</p>
]]></f></r>
<r><f>112</f><f><![CDATA[OBIETTIVI DI GENERAZIONE DI REPORT PDF]]></f><f></f><f><![CDATA[<p>Al termine di queso capitolo il programmatore sarà in grado di:</p>
<ul>
<li>Creare un <em>template</em> con o2reporter</li>
<li>Produrre dei report in formato <em>PDF</em></li>
</ul>

]]></f></r>
<r><f>113</f><f><![CDATA[INTRODUZIONE DI GENERAZIONE DI REPORT PDF]]></f><f></f><f><![CDATA[<p>In questo capitolo vedremo come si collegano le risorse <em>XML</em> 
a o2reporter per la generazione automatica di un file <em>PDF</em> partendo 
da un <em>template</em>.</p>

<p>Per quanto riguarda le funzionalità di o2reporter si rimanda alla specifica
documentazione.</p>


]]></f></r>
<r><f>114</f><f><![CDATA[L'OPERATORE PRINT]]></f><f><![CDATA[L'operatore <i>Print</i>]]></f><f><![CDATA[<p>Dopo aver realizzato i programmi per l’esportazione dati verso file 
<em>XML</em> è possibile utilizzare o2reporter come generatore di report.
</p>

<p>o2reporter è un generatore di report molto semplice che utilizza le risorse 
<em>XML</em> come dataset, aiuta il programmatore nella definizione di 
<em>template</em> di stampa e, se invocato dall’istruzione <i>Print</i>,
produce direttamente un file <em>PDF</em> come risultato del report.</p>

<p>Riprendiamo il programma visto nel precedente capitolo, e torniamo alla action “esporta”; dopo l’istruzione <i>Execute action</i> inseriamo una nuova riga 
selezionando l’operatore <i>Print</i>.</p>

<p>Dopo aver selezionato l’operatore <i>Print</i> apparirà una finestra <i>Print information</i>, richiedendo di definire:</p>
<ol>
<li>Un’espressione per definire il nome del <em>template</em> che sarà utilizzato 
       (file di tipo <var>frf</var>). I template si trovano nella directory dei modelli
       (<var>[app_root]/models/</var>).</li>
<li>Un’espressione per definire il nome del file <em>PDF</em> che sarà prodotto 
       nella directory temporanea dell’utente collegato</li>
<li>Un elenco di risorse (file <em>XML</em>) implicate nel report con eventuali
       parametri per il collegamento fra risorse (<i>Parent</i>, <i>Master fields</i>, 
       <i>Index fields</i>).</li>
</ol>

<img src='img/image164.gif' />

<p>Nel nostro esercizio selezioniamo solamente la risorsa “customers” dal treeview 
di sinistra e premendo il pulsante <i>Include</i> otteniamo:</p>

<img src='img/image166.gif' />

<p>Dalla colonna <i>Test file</i> premere il pulsante di scelta e selezionare il file 
<em>XML</em> generato con l’export. Definire il file di test è necessario per 
accedere alla definizione grafica del <em>template</em> tramite o2reporter.</p>

<p>Premere il pulsante <i>Design</i> in basso a destra accedendo così a 
o2reporter.</p>

<img src='img/image168.gif' />

<p>Dopo aver realizzato il <em>template</em> salvare il file
(<var>nometemplate.frf</var>) nella directory dei modelli, esattamente in
<var>[app_root]/models/</var>.</p>
<p>Adesso, rieseguendo il progrmma nella directory <var>tmp</var> dell’utente,
comparirà il file <em>PDF</em>.</p>

<img src='img/image170.gif' /><br />
<img src='img/image172.gif' />
]]></f></r>
<r><f>115</f><f><![CDATA[IL CSS DELL'APPLICAZIONE]]></f><f><![CDATA[Il <em>CSS</em> dell'applicazione]]></f><f><![CDATA[<p>Questo capitolo ha come scopo quello di consentire al programmatore di 
intervenire sui vari aspetti grafici di un’applicazione. In particolare si vedrà come
utilizzare e gestire il file di <em>CSS</em> che sovrintende alla renderizzazione 
delle interfacce.</p>
]]></f></r>
<r><f>116</f><f><![CDATA[OBIETTIVI DI IL CSS DELL'APPLICAZIONE]]></f><f></f><f><![CDATA[<p>Al termine di questo capitolo il programmatore sarà in grado di:</p>
<ul>
<li>Specificare una classe di <em>CSS</em> per le proprietà di un controllo.</li>
<li>Modificare o sostituire la libreria <em>CSS</em> collegata all’applicazione.</li>
</ul>

]]></f></r>
<r><f>117</f><f><![CDATA[INTRODUZIONE DI IL CSS DELL'APPLICAZIONE]]></f><f></f><f><![CDATA[<p>Non è negli scopi di questo capitolo voler costituire una documentazione 
sull’uso dei <em>CSS</em> (<em>Cascading Style Sheets</em>): qui 
assumeremo una conoscenza elementare dell’<em>HTML</em> e del possibile 
uso di librerie esterne di definizione grafica (file <em>CSS</em>).</p>

<p>A questo aggiungeremo solo che o2, per una maggiore flessibilità e efficacia, 
non prevede, sui controlli, proprietà specifiche per tutte quelle caratteristiche 
grafiche che non abbiano una rilevanza funzionale. Ovvero non troverete 
nell’interfaccia alcun luogo dove specificare il colore del bordo di un controllo o 
l’immagine di sfondo della finestra. Una classe di stile può riassumere in sé tutte 
le caratteristiche desiderate e consentite dai <em>CSS</em>: o2 utilizza una 
classe di stile per ogni elemento grafico che sia possibile variare.</p>
]]></f></r>
<r><f>118</f><f><![CDATA[IL FILE CSS DELL’APPLICAZIONE]]></f><f><![CDATA[Il file <em>CSS</em> dell’applicazione]]></f><f><![CDATA[<p>Il file <em>CSS</em> dell’applicazione è un file che raccoglie una serie di 
definizioni grafiche, ognuna col proprio nome (classi di stile). Variando il file 
<em>CSS</em> dell’applicazione è possibile sostituire in blocco le definizioni 
grafiche corrispondenti ad ogni nome, ottenendo così lo stesso effetto di variare 
il tema in <em>Windows</em> o in <em>KDE</em>.</p>

<img src='img/image174.gif' />

<p>Nella pagina delle proprietà dell’applicazione trovate il campo dove indicare 
il nome del file <em>CSS</em>. o2runtime controllerà nelle seguenti cartelle la 
presenza del file indicato:</p>
<ol>
<li><var>file://[app_root]/htdocs/css/</var> (cioè
       <var>http://[app_alias]/css/</var>)</li>
<li><var>file://[o2_root]/css/</var> (cioè 
       <var>http://[o2_alias]/css/</var>)</li>
</ol>

<p>Nel caso in cui il file non venga trovato o nessun file di <en>CSS</em> venga
specificato, o2runtime provvederà ad utilizzare il <em>CSS</em> di default fornito 
con la distribuzione (<var>/[o2_root]/css/default.css</var>).</p>

<p>La variazione del file di <em>CSS</em> sarà visibile al client solo all’apertura 
della prossima sezione, ovvero dopo il prossimo login.</p>
]]></f></r>
<r><f>119</f><f><![CDATA[LA GRAFICA DEI CONTROLLI]]></f><f><![CDATA[La grafica dei controlli]]></f><f><![CDATA[<p>I controlli, sulla base della loro rappresentazione <em>HTML</em>, si 
dividono in due categorie:</p>
<ol>
<li>semplici</li>
<li>composti</li>
</ol>

<p>Si dicono semplici tutti quei controlli ai quali (come al combo box, all’edit field 
o all’immagine) in <em>HTML</em> corrisponde uno specifico e singolo tag, mentre
indicheremo come composti quei controlli che (come la tabella, il navigatore o la 
finestra) vengono assemblati dall’o2runtime utilizzando e giustapponendo più tag 
<em>HTML</em>.</p>

<p>A tutti gli elementi semplici è associata un’unica classe di stile, mentre gli 
elementi composti prevedono più classi di stile per i singoli tag costituenti.</p>

<p>Le classi di stile associate alla window si trovano nella pagina delle proprietà 
della form.</p>

<img src='img/image176.gif' />

<p>Le classi di stile dei controlli si trovano nella finestra delle proprietà <i>Object
Inspector</i> dei singoli controlli, nella sessione di edit della form.</p>

<img src='img/image178.gif' />

<p>Premendo <kbd>F5</kbd> sui campi destinati alle classi di stile, l’interfaccia
cercherà il file di <em>CSS</em> collegato all’applicazione (se non sarà in grado 
di identificarlo chiederà al programmatore di indicarlo su file system) e mostrerà
l’elenco delle classi di stile presenti sul file e che non inizino con l’identificativo 
“o2_” (vedi oltre i default). In alto una finestra di preview mostra le caratteristiche
della classe e permette di selezionare una voce da associare al controllo.</p>

<p>In questo modo è possibile associare ad un controllo (o ad una parte del 
controllo, per i controlli complessi) un alias di renderizzazione, che poi verrà risolto
dall’o2runtime utilizzando il file di <em>CSS</em> specificato per l’applicazione.
</p>
]]></f></r>
<r><f>120</f><f><![CDATA[LE CLASSI CSS DI DEFAULT]]></f><f><![CDATA[Le classi <em>CSS</em> di default]]></f><f><![CDATA[<p>Qualora nessuna classe di stile venga specificata per un controllo o per 
una sua proprietà, l’o2 utilizzerà una classe di default specifica e la cui 
definizione è contenuta nel file <var>default.css</var> della distribuzione.</p>

<p>Per alcune proprietà grafiche dell’applicazione (come, ad esempio, i menu o 
lo sfondo della finestra del browser) non è possibile specificare la classe di stile 
ma è comunque possibile modificare la classe di default associata.</p>

<p>Le classi il cui nome termina con i suffissi “_focus”, “_hover” e “_dis” vengono
composte automaticamente dall’o2runtime a partire dal nome della classe associata, 
al fine di ottenere certi effetti grafici con particolari significati funzionali:</p>

<ul>
<li>"_focus"
      <p>La classe viene sostituita alla classe di base nei controlli associati a campo 
      quando il cursore di inserimento (<em>caret</em>) si posiziona sul controllo.
      </li>
<li>"_hover"
      <p>La classe viene sostituita alla classe di base nei controlli cliccabili quando 
      il puntatore del mouse passa sopra il controllo.</li>
<li>"_dis"
      <p>La classe viene sostituita alla classe di base per i controlli non abilitati alla
      modifica o inattivi.</li>
</ul>

<p>Se, ad esempio, voglio utilizzare una classe di nome “importo” per un certo 
controllo edit, dovrò provvedere a creare nel file <em>CSS</em> dell’applicazione
anche le rispettive classi “importo_focus” e “importo_dis”, che sovrintenderanno 
alla renderizzazione del controllo nei casi, rispettivamente, che il controllo diventi 
il controllo attivo o che il controllo sia disabilitato alla modifica.</p>]]></f></r>
<r><f>121</f><f><![CDATA[ELENCO CLASSI CSS DI DEFAULT]]></f><f></f><f><![CDATA[<p>Ecco un elenco delle classi previste per i singoli controlli, con l’indicazione 
del tag <em>HTML</em> a cui si applicano, il nome della classe di default e una 
breve descrizione:</p>

<table>
 <tr>
  <th>Controllo</th>
  <th>Propriet&agrave;</th>
  <th>Default</th>
  <th>Tag HTML</th>
  <th width='60%'>Descrizione</th>
 </tr>
 
 <tr>
  <td> &nbsp; </td>
  <td> &nbsp; </td>
  <td>o2_sfondo</td>
  <td><code>&lt;body</code>&gt;</td>
  <td>Aspetto generale e sfondo della finestra del browser</td>
 </tr>

 <tr>
  <td colspan="1" rowspan="5">Menu</td>
  <td colspan="1" rowspan="5"> &nbsp; </td>
  <td>o2_barraMenu</td>
  <td><code>&lt;table</code>&gt;</td>
  <td>Barra dei menu di livello 0</td>
 </tr>
 
 <tr>
  <td>o2_sottoMenu</td>
  <td><code>&lt;table</code>&gt;</td>
  <td>Menu a tendina di livello </code>&gt; 0</td>
 </tr>
 
 <tr>
  <td>o2_voceMenu</td>
  <td><code>&lt;td</code>&gt;</td>
  <td>Ogni voce di menu quando non attiva</td>
 </tr>
 
 <tr>
  <td>o2_voceMenuAttiva</td>
  <td><code>&lt;td</code>&gt;</td>
  <td>Ogni voce di menu quando attiva</td>
 </tr>
 
 <tr>
  <td>o2_spacerMenu</td>
  <td><code>&lt;hr</code>&gt;</td>
  <td>Separatore orizzontale</td>
 </tr>

 <tr>
  <td colspan="1" rowspan="10">Form</td>
  <td>Form</td>
  <td>o2_form_window</td>
  <td><code>&lt;div</code>&gt;</td>
  <td>Ingombro totale della finestra</td>
 </tr>
 
 <tr>
  
  <td>Document button</td>
  <td>o2_form_doc</td>
  <td><code>&lt;td</code>&gt;</td>
  <td>Angolo in alto a sinistra della finestra</td>
 </tr>

 <tr>
  
  <td>Minimize button</td>
  <td>o2_form_close</td>
  <td><code>&lt;td</code>&gt;</td>
  <td>Pulsante di minimizzazione della finestra (a sinistra della crocetta di chiusura, 
      quando la finestra &egrave; massimizzata)</td>
 </tr>
 
 <tr>
  
  <td>Maximize button</td>
  <td>o2_form_open</td>
  <td><code>&lt;td</code>&gt;</td>
  <td>Pulsante di ripristino della finestra (a sinistra della crocetta di chiusura, quando
      la finestra &egrave; minimizzata)</td>
 </tr>
 
 <tr>
  
  <td>Close form button</td>
  <td>o2_form_exit</td>
  <td><code>&lt;td</code>&gt;</td>
  <td>Angolo in alto a destra della finestra (crocetta di chiusura)</td>
 </tr>
 
 <tr>
  
  <td>Resize form button</td>
  <td>o2_form_resize</td>
  <td><code>&lt;td</code>&gt;</td>
  <td>Angolo in basso a destra della finestra, quando la barra di stato &egrave; visibile.
      Contiene il pulsante di <i>resize</i> della form</td>
 </tr>
 
 <tr>
  
  <td>Title on active form</td>
  <td>o2_form_title</td>
  <td><code>&lt;table</code>&gt;</td>
  <td>Barra del titolo per le finestre attive</td>
 </tr>

 <tr>
  
  <td>Title on inactive form</td>
  <td>o2_form_title_no</td>
  <td><code>&lt;table</code>&gt;</td>
  <td>Barra del titolo per le finestre inattive</td>
 </tr>
 
 <tr>
  
  <td>Body</td>
  <td>o2_form_body</td>
  <td><code>&lt;div</code>&gt; / <code>&lt;iframe</code>&gt;</td>
  <td>Spazio interno della finestra</td>
 </tr>
 
 <tr>
  
  <td>Status bar</td>
  <td>o2_form_status</td>
  <td><code>&lt;table</code>&gt;</td>
  <td>Barra di stato</td>
 </tr>
 
 <tr>
  <td colspan="1" rowspan="11">Table</td>
  <td>CssDiv</td>
  <td>o2_tab_space</td>
  <td><code>&lt;div</code>&gt;</td>
  <td>Ingombro esterno stanziato della tabella (come da design)</td>
 </tr>
 
 <tr>
  
  <td>CssTab</td>
  <td>o2_tab_tab</td>
  <td><code>&lt;table</code>&gt;</td>
  <td>Ingombro esterno effettivo della tabella (a seconda del numero di righe 
      presenti)</td>
 </tr>
 
 <tr>
  
  <td>Css Header (controllo)</td>
  <td>o2_tab_testa</td>
  <td><code>&lt;th</code>&gt;</td>
  <td>Barra dei titoli di colonna. Questa classe &egrave; controllabile anche dal campo 
      <i>Css Header</i> delle <i>Parent Options</i> del controllo in tabella</td>
 </tr>
 
 <tr>
  
  <td>CssBody (form) / Css Line (controllo)</td>
  <td>o2_tab_corpo</td>
  <td><code>&lt;td</code>&gt;</td>
  <td>Cella del corpo della tabella per le righe diverse dal record corrente. 
      Questa classe &egrave; controllabile anche dal campo <i>Css Line</i> delle <i>Parent 
      Options</i> del controllo in tabella</td>
 </tr>

 <tr>
  
  <td>CssCurrentLine (form) / Css Line (controllo)</td>
  <td>o2_tab_sele</td>
  <td><code>&lt;td</code>&gt;</td>
  <td>Cella del corpo della tabella per la sola riga del record corrente. Questa classe 
      &egrave; controllabile anche dal campo <i>Css Line</i> delle <i>Parent Options</i> del
      controllo in tabella</td>
 </tr>
 
 <tr>
  
  <td>CssLine</td>
  <td>o2_tab_riga</td>
  <td><code>&lt;tr</code>&gt;</td>
  <td>Righe dispari del corpo</td>
 </tr>

 <tr>
  
  <td>CssAlternate</td>
  <td>o2_tab_alt</td>
  <td><code>&lt;tr</code>&gt;</td>
  <td>Righe pari del corpo</td>
 </tr>
 
 <tr>
  
  <td>CssMouseOverLine</td>
  <td>o2_tab_point</td>
  <td><code>&lt;tr</code>&gt;</td>
  <td>Riga, non del record corrente, quando vi si posizioni sopra il puntatore del 
      mouse</td>
 </tr>
 
 <tr>
  
  <td colspan="1" rowspan="3"> &nbsp; </td>
  <td>o2_tab_sort</td>
  <td><code>&lt;span</code>&gt;</td>
  <td>Pulsante a fianco del titolo che indica la possibilit&agrave; di sorting per la 
      colonna</td>
 </tr>
 
 <tr>
  
  
  <td>o2_tab_sorta</td>
  <td><code>&lt;span</code>&gt;</td>
  <td>Pulsante a fianco del titolo quando la colonna &egrave; gi&agrave; segmento ascendente di 
      sorting</td>
 </tr>
 
 <tr>
  <td>o2_tab_sortd</td>
  <td><code>&lt;span</code>&gt;</td>
  <td>Pulsante a fianco del titolo quando la colonna &egrave; gi&agrave; segmento discendente di 
      sorting</td>
 </tr>
 
 <tr>
  <td colspan="1" rowspan="9">Navigator orizzontale (o2_ctrl_nav_) e verticale (o2_ctrl_navv_)</td>
  <td>CssSpace</td>
  <td>o2_ctrl_nav_space / o2_ctrl_navv_space</td>
  <td><code>&lt;table</code>&gt;</td>
  <td>Ingombro totale del navigatore</td>
 </tr>
 
 <tr>
  
  <td>CssSlide</td>
  <td>o2_ctrl_nav_i / o2_ctrl_navv_i</td>
  <td><code>&lt;td</code>&gt;</td>
  <td>Barra scorrevole che indica la parte visibile</td>
 </tr>
 
 <tr>
  
  <td>CssNavBar</td>
  <td>o2_ctrl_nav_e / o2_ctrl_navv_e</td>
  <td><code>&lt;td</code>&gt;</td>
  <td>Slitta del navigatore in cui scorre la barra e che rappresenta la totalit&agrave; 
      del recordset</td>
 </tr>

 <tr>
  
  <td>CssFirst</td>
  <td>o2_ctrl_nav_first / o2_ctrl_navv_first</td>
  <td><code>&lt;div</code>&gt;</td>
  <td>Pulsante di <em>Vai a primo record</em></td>
 </tr>
 
 <tr>
  
  <td>CssPrevPage</td>
  <td>o2_ctrl_nav_prevpg / o2_ctrl_navv_prevpg</td>
  <td><code>&lt;div</code>&gt;</td>
  <td>Pulsante di <em>Vai a pagina precedente</em></td>
 </tr>
 
 <tr>
  
  <td>CssPrev</td>
  <td>o2_ctrl_nav_prev / o2_ctrl_navv_prev</td>
  <td><code>&lt;div</code>&gt;</td>
  <td>Pulsante di <em>Vai a record precedente</em></td>
 </tr>
 
 <tr>
  
  <td>CssNext</td>
  <td>o2_ctrl_nav_next / o2_ctrl_navv_next</td>
  <td><code>&lt;div</code>&gt;</td>
  <td>Pulsante di <em>Vai a record successivo</em></td>
 </tr>
 
 <tr>
  
  <td>CssNextPage</td>
  <td>o2_ctrl_nav_nextpg / o2_ctrl_navv_nextpg</td>
  <td><code>&lt;div</code>&gt;</td>
  <td>Pulsante di <em>Vai a pagina successiva</em></td>
 </tr>
 
 <tr>
  
  <td>CssLast</td>
  <td>o2_ctrl_nav_last / o2_ctrl_navv_last</td>
  <td><code>&lt;div</code>&gt;</td>
  <td>Pulsante di <em>Vai a ultimo record</em></td>
 </tr>

 <tr>
  <td>Text label</td>
  <td>Css class</td>
  <td>o2_ctrl_label</td>
  <td><code>&lt;div</code>&gt;</td>
  <td>Etichette di testo</td>
 </tr>
 
 <tr>
  <td>Separator</td>
  <td>Css class</td>
  <td>o2_ctrl_separatore</td>
  <td><code>&lt;hr</code>&gt;</td>
  <td>Separatore orizzontale</td>
 </tr>
 
 <tr>
  <td colspan="1" rowspan="3">Edit field</td>
  <td>Css class</td>
  <td>o2_ctrl_edit</td>
  <td><code>&lt;input type=&#8217;text&#8217;</code>&gt;</td>
  <td>Campo di edit quando modificabile e non &egrave; il controllo su cui &egrave; il 
      cursore</td>
 </tr>
 
 <tr>
  <td>Css class</td>
  <td>o2_ctrl_edit_focus</td>
  <td><code>&lt;input type=&#8217;text&#8217;</code>&gt;</td>
  <td>Campo di edit quando modificabile ed &egrave; il controllo su cui &egrave; il 
      cursore</td>
 </tr>
 
 <tr>
  <td>Css class</td>
  <td>o2_ctrl_edit_dis</td>
  <td><code>&lt;input type=&#8217;text&#8217;</code>&gt;</td>
  <td>Campo di edit quando non modificabile</td>
 </tr>
 
 <tr>
  <td colspan="1" rowspan="3">Text area</td>
  <td>Css class</td>
  <td>o2_ctrl_text</td>
  <td><code>&lt;textarea</code>&gt;</td>
  <td>Multiline edit area quando modificabile e non &egrave; il controllo su cui &egrave; 
      il cursore</td>
 </tr>
 
 <tr>
  <td>Css class</td>
  <td>o2_ctrl_text_focus</td>
  <td><code>&lt;textarea</code>&gt;</td>
  <td>Multiline edit area quando modificabile ed &egrave; il controllo su cui &egrave; il 
      cursore</td>
 </tr>
 
 <tr>
  <td>Css class</td>
  <td>o2_ctrl_text_dis</td>
  <td><code>&lt;textarea</code>&gt;</td>
  <td>Multiline edit area quando non modificabile</td>
 </tr>

 <tr>
  <td colspan="1" rowspan="2">List/combo box</td>
  <td>Css class</td>
  <td>o2_ctrl_listcombo</td>
  <td><code>&lt;select</code>&gt;</td>
  <td>List/combo box quando non &egrave; il controllo su cui &egrave; il cursore</td>
 </tr>
 
 <tr>
  <td>Css class</td>
  <td>o2_ctrl_listcombo_focus</td>
  <td><code>&lt;select</code>&gt;</td>
  <td>List/combo box quando &egrave; il controllo su cui &egrave; il cursore</td>
 </tr>

 <tr>
  <td colspan="1" rowspan="3">Button (standard button) &nbsp;  &nbsp; </td>
  <td>Css class</td>
  <td>o2_ctrl_button</td>
  <td><code>&lt;input type =&#8217;button&#8217;</code>&gt;</td>
  <td>Bottone quando abilitato e non vi &egrave; sopra il puntatore del mouse</td>
 </tr>
 
 <tr>
  <td>Css class</td>
  <td>o2_ctrl_button:hover</td>
  <td><code>&lt;input type =&#8217;button&#8217;</code>&gt;</td>
  <td>Bottone quando abilitato e vi &egrave; sopra il puntatore del mouse</td>
 </tr>

 <tr>
  <td>Css class</td>
  <td>o2_ctrl_button_dis</td>
  <td><code>&lt;input type =&#8217;button&#8217;</code>&gt;</td>
  <td>Bottone quando non &egrave; abilitato</td>
 </tr>
 
 <tr>
  <td colspan="1" rowspan="3">Link (href style button)</td>
  <td>Css class</td>
  <td>o2_ctrl_ref</td>
  <td><code>&lt;span</code>&gt;</td>
  <td>Link ipertestuale attivo e quando non vi &egrave; sopra il puntatore del 
      mouse</td>
 </tr>

 <tr>
  <td>Css class</td>
  <td>o2_ctrl_ref_hover</td>
  <td><code>&lt;span</code>&gt;</td>
  <td>Link ipertestuale attivo e quando vi &egrave; sopra il puntatore del 
      mouse</td>
 </tr>
 
 <tr>
  <td>Css class</td>
  <td>o2_ctrl_ref_dis</td>
  <td><code>&lt;span</code>&gt;</td>
  <td>Link ipertestuale non attivo</td>
 </tr>
 
 <tr>
  <td colspan="1" rowspan="2">File upload &nbsp; </td>
  <td>Css class</td>
  <td>o2_ctrl_file</td>
  <td><code>&lt;input type=&#8217;file&#8217;</code>&gt;</td>
  <td>Controllo di file upload quando non &egrave; il controllo su cui &egrave; 
      il cursore</td>
 </tr>
 
 <tr>
  <td>Css class</td>
  <td>o2_ctrl_file_focus</td>
  <td><code>&lt;input type=&#8217;file&#8217;</code>&gt;</td>
  <td>Controllo di file upload quando &egrave; il controllo su cui &egrave; il 
      cursore</td>
 </tr>
 
 <tr>
  <td colspan="1" rowspan="5">Multipage &nbsp;  &nbsp;  &nbsp;  &nbsp; </td>
  <td>Css class</td>
  <td>o2_ctrl_multi_out</td>
  <td><code>&lt;table</code>&gt;</td>
  <td>Ingombro totale esterno del controllo</td>
 </tr>
 
 <tr>
  <td>Css class</td>
  <td>o2_ctrl_multi_in</td>
  <td><code>&lt;div</code>&gt;</td>
  <td>Spazio disponibile interno del controllo</td>
 </tr>
 
 <tr>
  <td>Css class</td>
  <td>o2_ctrl_multi_on</td>
  <td><code>&lt;input type =&#8217;button&#8217;</code>&gt;</td>
  <td>Pulsante della pagina non attivabile (pagina corrente)</td>
 </tr>
 
 <tr>
  <td>Css class</td>
  <td>o2_ctrl_multi_off</td>
  <td><code>&lt;input type =&#8217;button&#8217;</code>&gt;</td>
  <td>Pulsanti delle pagine attivabili (non pagina corrente) quando non vi &egrave; 
      sopra il puntatore del mouse</td>
 </tr>
 
 <tr>
  <td>Css class</td>
  <td>o2_ctrl_multi_off:hover</td>
  <td><code>&lt;input type =&#8217;button&#8217;</code>&gt;</td>
  <td>Pulsanti delle pagine attivabili (non pagina corrente) quando vi &egrave; sopra 
      il puntatore del mouse</td>
 </tr>

</table>

]]></f></r>
<r><f>122</f><f><![CDATA[LA MODIFICA DELLE CLASSI DI STILE]]></f><f><![CDATA[La modifica delle classi di stile]]></f><f><![CDATA[<p>A questo punto apparirà evidente che, per variare il modo in cui 
o2runtime rappresenta graficamente un controllo o una sua parte, al 
programmatore si offrono tre distinte possibilità:</p>
<ol>
<li>Associare al controllo una classe diversa da quella di default
       <p>Serve a differenziare un certo controllo, in una sua specifica istanza, 
       in una specifica form, da tutti gli altri controlli dello stesso tipo. Questo 
       modo di intervenire risulta particolarmente utile per risolvere peculiarità 
       grafiche contingenti (come, ad esempio, per differenziare una certa colonna 
       in una tabella o per evidenziare un titolo o una informazione in una specifica 
       form) ma richiede che lo sviluppatore intervenga direttamente sul controllo 
       da modificare.</p></li>
<li>Variare nel file <em>CSS</em> dell’applicazione la classe di default
       <p>Questo secondo metodo, invece, serve a fondare uno standard di 
       riferimento per tutta l’applicazione e ad avvicinare tutti i controlli di una 
       stessa categoria alle preferenze grafiche e funzionali dello sviluppatore. 
       Questo tipo di intervento può essere molto utile per definire uno standard 
       grafico collettivo in una situazione di sviluppo in equipe o per intervenire 
       “in un colpo solo” su tutti i controlli di una stessa categoria, per variarne le
       caratteristiche senza dover rintracciare e modificare ogni programma che ne 
       faccia uso.</p>
       <p><b>ATTENZIONE</b>: la definizione generale dell’aspetto per i singoli 
       controlli è un problema che dovrebbe essere preso in considerazione prima 
       di intraprendere lo sviluppo dei programmi, in quanto la definizione successiva 
       di certe caratteristiche (ad esempio di dimensione, di bordi o di overflow) 
       potrebbe costringere gli sviluppatori a correggere posizioni e spaziature per 
       i controlli già inseriti nelle form.</p></li>
<li>Variare il file di <em>CSS</em> associato all’applicazione
       <p>Questa terza ed ultima possibilità consiste nell’indicare per l’applicazione 
       un diverso file <em>CSS</em> o nel sovrascrivere il file indicato per 
       l’applicazione con un diverso file. In questi due casi (entrambi facilmente
       realizzabili anche senza l’ausilio dell’interfaccia di sviluppo) si avrà come 
       risultato, al successivo login, la variazione di tutte le caratteristiche grafiche
       dell’applicazione: questo metodo può essere particolarmente utile per creare 
       veri e propri temi o skin, cioè set preconfezionati di definizioni grafiche,
       intercambiabili per le proprie interfacce.</p></li>
</ol>
]]></f></r>
<r><f>123</f><f><![CDATA[NOTE E CONSIGLI SUI CSS]]></f><f><![CDATA[Note e consigli]]></f><f><![CDATA[<p>Per chi abbia una minima familiarità con l’uso dei <em>CSS</em> non 
sarà difficile immaginare quali difficoltà si possano celare dietro la modifica 
delle classi; per tutti gli altri vogliamo farne una rapida rassegna:</p>
<ul>
<li>Le caratteristiche supportate dai <em>CSS</em> variano a seconda del 
       tag <em>HTML</em> a cui verrà associata la classe. Un esempio banale: 
       inutile cercare di specificare il colore di sfondo di un separatore orizzontale.
       </li>
<li>Gli standard dei <em>CSS</em> sono attualmente materia di evoluzione e
       possono quindi variare da versione a versione.</li>
<li>Nonostante la presenza di uno standard nominalmente accettato le differenze 
       di renderizzazione di certe caratteristiche di stile possono variare (anche
       sensibilmente) da browser a browser. Il file <em>CSS</em> fornito con la
       distribuzione mira, in primo luogo, ad eliminare queste differenze (o comunque 
       a diminuirne l’impatto funzionale).</li>
<li>Uno stesso risultato grafico si può, a volte, raggiungere con percorsi di stile 
       diversi: spesso, però, ognuno di essi comporta effetti collaterali diversi e può
       interagire in maniera diversa con le altre caratteristiche del controllo.</li>
</ul>
<br />
<h4>Consigli operativi</h4>
<ul>
<li>Provare ogni modifica alle classi di stile su più browser, e comunque su tutti 
       quelli che si intende supportare.</li>
<li>Partire da una copia del file <em>CSS</em> della distribuzione per creare 
       nuovi file e da una delle classi del file della distribuzione per creare nuove 
       classi, variando, ad ogni prova, pochi elementi facilmente rintracciabili.</li>
<li>Verificare a runtime, su differenti browser, la posizione e l’ingombro delle 
       form e dei controlli editati con l’interfaccia: certi elementi hanno, in sviluppo,
       dimensioni e caratteristiche standard che possono variare sensibilmente con 
       la definizione di stile.</li>
<li>Evitare il proliferare di classi simili: rendono più complessa e incerta la scelta 
       in sviluppo e non offrono standard di riferimento all’operatore finale.</li>
<li>Con i <em>CSS</em> è possibile ottenere praticamente qualunque effetto 
       voluto: quindi evitare di ricorre ad espedienti di sovrapposizioni o 
       mascheramenti di controlli con altri controlli, perché rendono difficoltoso
       rintracciare e manutenere i controlli in sviluppo.</li>
</ul>
]]></f></r>
<r><f>124</f><f><![CDATA[DISTRIBUIRE L’APPLICAZIONE]]></f><f><![CDATA[Distribuire l’applicazione]]></f><f><![CDATA[<p>Questo capitolo conclude il corso e guida il programmatore alla distribuzione
dell’applicazione realizzata.</p>
]]></f></r>
<r><f>125</f><f><![CDATA[OBIETTIVI DI DISTRIBUIRE L'APPLICAZIONE]]></f><f></f><f><![CDATA[<p>Dopo questo capitolo il programmatore sarà in grado di:</p>
<ul>
<li>Consegnare i file necessari ad un'applicazione o2</li>
<li>Variare i file di configurazione per installare l’applicazione nell’ambiente 
       finale</li>
</ul>

]]></f></r>
<r><f>126</f><f><![CDATA[INFO DOC]]></f><f></f><f><![CDATA[<center><br /><a href='index.html'>Content</a>
<br /><br /><i>Corso aggiornato al Settembre 2008</i></center>]]></f></r>
<r><f>127</f><f><![CDATA[_FUNCTIONS LIST]]></f><f><![CDATA[Functions reference]]></f><f><![CDATA[<p>Le funzioni di o2 sono di varia natura e possono essere usate per differenti scopi:</p>
<ol>
<li><i>Informative</i>
    <p>Ritornano informazioni riguardo ad oggetti e strutture di sistema, come, 
       ad esempio, il contenuto dei <i>repository</i>, il <i>menu</i> impostato,
       informazioni di <i>filesystem</i> o le posizioni delle form. Le informazioni
       sono spesso riportate in forma di <i>array</i>.</p></li>
<li><i>Esecutive</i>
    <p>Agiscono sulle caratteristiche dell'applicazione, modificandone il
       comportamento, oppure eseguono comandi di sistema. Possono essere usate per
       creare o eliminare tabelle di database, per agire sul <i>filesystem</i>,
       oppure per inviare un messaggio di posta elettronica.</p></li>
<li><i>Per la manipolazione dei dati</i>
    <p>Ritornano forme specifiche dei valori passati: ad esempio, <i>script
       javascript</i> per l'esecuzione di comandi, valori formattati secondo un
       certo <i>data model</i>, oppure valori futuri o passati di data e ora.
       </p></li>
</ol>
<p>Le funzioni possono essere usate all'interno di qualuque <i>expression</i> e
   verranno eseguite al momento della valutazione dell'espressione in cui sono
   contenute.</p>
<p>L'elenco delle funzioni è qui suddiviso secondo l'<i>oggetto</i> a cui tali
   funzioni si riferiscono.</p>]]></f></r>
<r><f>128</f><f><![CDATA[FUNZIONI DI APPLICAZIONE]]></f><f><![CDATA[Funzioni di applicazione]]></f><f><![CDATA[<p>Questo gruppo di funzioni si riferisce all'applicazione e ritorna informative
   dipendenti dalla modalità di installazione, dal contenuto dei repository e dalle
   impostazioni contenute nel file di configurazione <var>[app]/[app].ini</var>.</p>]]></f></r>
<r><f>129</f><f><![CDATA[FUNZIONI DI UTENTE]]></f><f><![CDATA[Funzioni di utente]]></f><f><![CDATA[<p>Questo gruppo di funzioni si riferisce alle credenziali possedute dall'utente
   attualmente loggato, cioé passato come parametro <code>o2user</code> alla prima
   request all'applicazione. Se nessun utente è stato indicato o se l'utente 
   richiesto non è stato validato, le credenziali adottate dal sistema saranno 
   quelle dell'utente "default".</p>]]></f></r>
<r><f>130</f><f><![CDATA[FUNZIONI DI RUNTIME]]></f><f><![CDATA[Funzioni di runtime]]></f><f><![CDATA[<p>Questo gruppo di funzioni si riferisce all'o2runtime in uso per l'applicazione e ritorna informative dipendenti dalla modalità di installazione della runtime e dalle
impostazioni contenute nel file di configurazione <var>o2/o2.ini</var>.</p>]]></f></r>
<r><f>131</f><f><![CDATA[FUNZIONI DI FILESYSTEM]]></f><f><![CDATA[Funzioni di filesystem]]></f><f></f></r>
<r><f>132</f><f><![CDATA[FUNZIONI DI DATABASE SERVER]]></f><f><![CDATA[Funzioni di database server]]></f><f><![CDATA[<p>Questo gruppo di funzioni riguarda i due elementi di base della connettività:
   i server e i database su essi definiti, come definiti dal contenuto del 
   <i>servers & databases repository</i> (default  
   <var>[app_root]/prgs/db_repository.inc</var>).</p>
]]></f></r>
<r><f>133</f><f><![CDATA[FUNZIONI DI TABELLE E CAMPI]]></f><f><![CDATA[Funzioni di tabelle e campi]]></f><f></f></r>
<r><f>134</f><f><![CDATA[FUNZIONI DI VIEW]]></f><f><![CDATA[Funzioni di view]]></f><f></f></r>
<r><f>135</f><f><![CDATA[FUNZIONI DI FORM]]></f><f><![CDATA[Funzioni di form]]></f><f><![CDATA[Le funzioni contenute in questa sezione riguardano informative ed esecuzioni relative a form definite per un programma.]]></f></r>
<r><f>136</f><f><![CDATA[FUNZIONI DI CLIENT BROWSER]]></f><f><![CDATA[Funzioni di client browser]]></f><f></f></r>
<r><f>137</f><f><![CDATA[FUNZIONI DI PROGRAMMA]]></f><f><![CDATA[Funzioni di programma]]></f><f></f></r>
<r><f>138</f><f><![CDATA[FUNZIONI MISCELLANEE]]></f><f><![CDATA[Funzioni miscellanee]]></f><f></f></r>
<r><f>139</f><f><![CDATA[FUNCTION O2RNT_ALIAS]]></f><f><![CDATA[o2rnt_alias()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2rnt_alias()</code></p>
<p><i>Parameters:</i> La funzione non prevede parametri</p>
<p><i>Returns:</i> <code>string</code></p>
<p>Ritorna il <i>virtual host</i> di o2runtime, così come configurato per il
   webserver, ovvero l'indirizzo HTTP della webroot di runtime, cioé della directory
   <code>/o2/htdocs/</code>.</p>
<p>La stringa ritornata sarà della forma <code>http://www.someweb.com/o2/</code></p>


]]></f></r>
<r><f>140</f><f><![CDATA[FUNCTION O2RNT_ROOT]]></f><f><![CDATA[o2rnt_root()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2rnt_root()</code></p>
<p><i>Parameters:</i> La funzione non prevede parametri</p>
<p><i>Returns:</i> <code>string</code></p>
<p>Ritorna la directory root di o2runtime, ovvero il path completo della directory
   <code>/o2/</code>.</p>
<p>La stringa ritornata sarà della forma <code>/somepath/o2/</code></p>]]></f></r>
<r><f>141</f><f><![CDATA[FUNCTION O2RNT_DIRTHREADS]]></f><f><![CDATA[o2rnt_dirthreads()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2rnt_dirthreads()</code></p>
<p><i>Parameters:</i> La funzione non prevede parametri</p>
<p><i>Returns:</i> <code>string</code></p>
<p>Ritorna la directory in cui vengono salvati i file di processo per le runtime in esecuzione, ovvero il path completo della directory <code>/o2/threads/</code>.</p>
<p>La stringa ritornata sarà della forma <code>/somepath/o2/threads/</code></p>]]></f></r>
<r><f>142</f><f><![CDATA[FUNCTION O2RNT_DIRCSS]]></f><f><![CDATA[o2rnt_dircss()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2rnt_dircss()</code></p>
<p><i>Parameters:</i> La funzione non prevede parametri</p>
<p><i>Returns:</i> <code>string</code></p>
<p>Ritorna la directory in cui sono contenuti i css della runtime, ovvero il path
   completo della directory <code>/o2/htdocs/css/</code>.</p>
<p>La stringa ritornata sarà della forma <code>/somepath/o2/htdocs/css/</code></p>]]></f></r>
<r><f>143</f><f><![CDATA[FUNCTION O2APP_ALIAS]]></f><f><![CDATA[o2app_alias()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2app_alias()</code></p>
<p><i>Parameters:</i> La funzione non prevede parametri</p>
<p><i>Returns:</i> <code>string</code></p>
<p>Ritorna il <i>virtual host</i> di applicazione, così come configurato per il
   webserver, ovvero l'indirizzo HTTP della webroot di applicazione, cioé della
   directory <code>/[app]/htdocs/</code>.</p>
<p>La stringa ritornata sarà della forma <code>http://www.someweb.com/app/</code></p>
]]></f></r>
<r><f>144</f><f><![CDATA[FUNCTION O2APP_CREATETABLES]]></f><f><![CDATA[o2app_createtables()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2app_createtables()</code></p>
<p><i>Parameters:</i> La funzione non prevede parametri</p>
<p><i>Returns:</i> <code>void</code></p>
<p>Crea tute le tabelle di database definite per la l'applicazione, cioé nel 
   <i>tables repository</i>, che già non esistano.</p>
<p>La creazione delle tabelle viene automaticamente eseguita ad ogni accesso di un
   utente all'applicazione</p>
]]></f></r>
<r><f>145</f><f><![CDATA[FUNCTION O2APP_CSS]]></f><f><![CDATA[o2app_css()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2app_css()</code></p>
<p><i>Parameters:</i> La funzione non prevede parametri</p>
<p><i>Returns:</i> <code>string</code></p>
<p>Ritorna il nome del file di CSS (<em>Cascading Style Sheet</em>) attualmente in
   uso per l'applicazione.</p>
]]></f></r>
<r><f>146</f><f><![CDATA[FUNCTION O2APP_DATABASES]]></f><f><![CDATA[o2app_databases()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2app_databases()</code></p>
<p><i>Parameters:</i> La funzione non prevede parametri</p>
<p><i>Returns:</i> <code>array</code></p>
<p>Ritorna l'elenco dei nomi dei database definiti per l'applicazione, ovvero
   contenuti nel <i>servers & databases repository</i> (default 
   <var>[app_root]/prgs/db_repository.inc</var>), in forma di array con indici
   numerici.</p>
<p><h4>Sample</h4>
   <code>Array<br/>
(<br />
&nbsp; [0] => default<br/>
&nbsp; [1] => mysql_local<br/>
&nbsp; [2] => mydata<br/>
)</code></p>]]></f></r>
<r><f>147</f><f><![CDATA[FUNCTION O2APP_DEVELOPER]]></f><f><![CDATA[o2app_developer()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2app_developer()</code></p>
<p><i>Parameters:</i> La funzione non prevede parametri</p>
<p><i>Returns:</i> <code>string</code></p>
<p>Ritorna il nome del developer attualmente loggato all'applicazione oppure "" se
   nessuno sviluppatore è stato indicato.</p>]]></f></r>
<r><f>148</f><f><![CDATA[FUNZIONI DI MENU]]></f><f><![CDATA[Funzioni di menu]]></f><f></f></r>
<r><f>149</f><f><![CDATA[FUNCTION O2FORM_HEIGHT]]></f><f><![CDATA[o2form_height()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2form_height($form_name, [$level=0])</code></p>
<p><i>Parameters:</i><ul>
                         <li><i>$form_name</i> nome della form di cui si sta
                             richiedendo l'informativa</li>
                         <li><i>$level</i> (optional) il numero del livello di
                             esecuzione (indice di programma in esecuzione) del
                             programma a cui appartiene la form richiesta - se omesso
                             o passato a "0" verrà utilizzato il livello di 
                             esecuzione del programma corrente</li>
                     </ul></p>
<p><i>Returns:</i> <code>integer</code></p>
<p>Ritorna il valore dell'altezza in px della form <i>$form_name</i>.</p>
<p><h4>Sample</h4>
   <code>$h_local = o2form_height("main_win");</code><br>
   Ritorna l'altezza della form <i>main_win</i> definita nel programma 
   corrente.<br><br>
   <code>$h_local = o2form_height("detail", count(o2app_prg()) - 1);</code><br>
   Ritorna l'altezza della form <i>detail</i> definita nel programma che ha chiamato
   il programma corrente.</p>]]></f></r>
<r><f>150</f><f><![CDATA[FUNCTION O2FORM_WIDTH]]></f><f><![CDATA[o2form_width()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2form_width($form_name, [$level=0])</code></p>
<p><i>Parameters:</i><ul>
                         <li><i>$form_name</i> nome della form di cui si sta
                             richiedendo l'informativa</li>
                         <li><i>$level</i> (optional) il numero del livello di
                             esecuzione (indice di programma in esecuzione) del
                             programma a cui appartiene la form richiesta - se omesso
                             o passato a "0" verrà utilizzato il livello di 
                             esecuzione del programma corrente</li>
                     </ul></p>
<p><i>Returns:</i> <code>integer</code></p>
<p>Ritorna il valore della larghezza in px della form <i>$form_name</i>.</p>
<p><h4>Sample</h4>
   <code>$w_local = o2form_width("main_win");</code><br>
   Ritorna la larghezza della form <i>main_win</i> definita nel programma 
   corrente.<br><br>
   <code>$w_local = o2form_width("detail", count(o2app_prg()) - 1);</code><br>
   Ritorna la larghezza della form <i>detail</i> definita nel programma che ha
   chiamato il programma corrente.</p>]]></f></r>
<r><f>151</f><f><![CDATA[FUNCTION O2FORM_X]]></f><f><![CDATA[o2form_x()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2form_x($form_name, [$level=0])</code></p>
<p><i>Parameters:</i><ul>
                         <li><i>$form_name</i> nome della form di cui si sta
                             richiedendo l'informativa</li>
                         <li><i>$level</i> (optional) il numero del livello di
                             esecuzione (indice di programma in esecuzione) del
                             programma a cui appartiene la form richiesta - se omesso
                             o passato a "0" verrà utilizzato il livello di 
                             esecuzione del programma corrente</li>
                     </ul></p>
<p><i>Returns:</i> <code>integer</code></p>
<p>Ritorna il valore in px della coordinata orizzontale dell'angolo superiore 
   sinistro della form <i>$form_name</i>.</p>
<p><h4>Sample</h4>
   <code>$x_local = o2form_x("main_win");</code><br>
   Ritorna la coordinata orizzontale della form <i>main_win</i> definita nel 
   programma corrente.<br><br>
   <code>$x_local = o2form_x("detail", count(o2app_prg()) - 1);</code><br>
   Ritorna la coordinata orizzontale della form <i>detail</i> definita nel 
   programma che ha chiamato il programma corrente.</p>]]></f></r>
<r><f>152</f><f><![CDATA[FUNCTION O2FORM_Y]]></f><f><![CDATA[o2form_y()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2form_y($form_name, [$level=0])</code></p>
<p><i>Parameters:</i><ul>
                         <li><i>$form_name</i> nome della form di cui si sta
                             richiedendo l'informativa</li>
                         <li><i>$level</i> (optional) il numero del livello di
                             esecuzione (indice di programma in esecuzione) del
                             programma a cui appartiene la form richiesta - se omesso
                             o passato a "0" verrà utilizzato il livello di 
                             esecuzione del programma corrente</li>
                     </ul></p>
<p><i>Returns:</i> <code>integer</code></p>
<p>Ritorna il valore in px della coordinata verticale dell'angolo superiore 
   sinistro della form <i>$form_name</i>.</p>
<p><h4>Sample</h4>
   <code>$y_local = o2form_y("main_win");</code><br>
   Ritorna la coordinata verticale della form <i>main_win</i> definita nel 
   programma corrente.<br><br>
   <code>$y_local = o2form_y("detail", count(o2app_prg()) - 1);</code><br>
   Ritorna la coordinata verticale della form <i>detail</i> definita nel 
   programma che ha chiamato il programma corrente.</p>]]></f></r>
<r><f>153</f><f><![CDATA[FUNCTION O2CTRL_FOCUS]]></f><f><![CDATA[o2ctrl_focus()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2form_focus($form_name, $ctrl_name)</code></p>
<p><i>Parameters:</i><ul>
                         <li><i>$form_name</i> nome della form a cui appartiene il
                             controllo a cui si vuole dare il focus</li>
                         <li><i>$ctrl_name</i> nome del controllo a cui si vuole 
                             dare il focus</li>
                     </ul></p>
<p><i>Returns:</i> <code>void</code></p>
<p>Imposta il focus per il controllo <i>$ctrl_name</i> della form <i>$form_name</i>.
   Per poter ricevere il focus il controllo deve essere visibile, altrimenti si
   risolverà in un errore di <i>javascript</i>.</p>
]]></f></r>
<r><f>154</f><f><![CDATA[FUNCTION O2USER_HAS]]></f><f><![CDATA[o2user_has()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2user_has($right_code)</code></p>
<p><i>Parameters:</i><ul>
                         <li><i>$right_code</i> nome del <i>right</i> di cui si 
                             vuole controllare il possesso</li>
                     </ul></p>
<p><i>Returns:</i> <code>boolean</code></p>
<p>Ritorna "true" se l'utente correntemente loggato possiede il diritto
   <i>$right_code</i>, altrimenti "false".</p>
<p>La funzione <code>o2user_has()</code> può risultare particolarmente utile per
   condizionare l'esecuzione di comandi o per condizionare visibilità e 
   modificabilità di controlli, in modo da limiterne l'uso ai soli possessori di 
   un certo diritto.</p>
]]></f></r>
<r><f>155</f><f><![CDATA[FUNCTION O2USER_IS]]></f><f><![CDATA[o2user_is()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2user_is($role_name)</code></p>
<p><i>Parameters:</i><ul>
                         <li><i>$role_name</i> nome del <i>role</i> a cui si 
                             vuole controllare l'appartenenza</li>
                     </ul></p>
<p><i>Returns:</i> <code>boolean</code></p>
<p>Ritorna "true" se l'utente correntemente loggato riveste il ruolo (appartiene 
   al gruppo) <i>$role_name</i>, altrimenti "false".</p>
<p>La funzione <code>o2user_is()</code> può risultare particolarmente utile per
   condizionare l'esecuzione di comandi o per condizionare visibilità e 
   modificabilità di controlli, in modo da limiterne l'uso ai soli appertenenti ad 
   un certo ruolo (gruppo).</p>
]]></f></r>
<r><f>156</f><f><![CDATA[FUNCTION O2USER_RIGHTS]]></f><f><![CDATA[o2user_rights()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2user_rights()</code></p>
<p><i>Parameters:</i> La funzione non prevede parametri</p>
<p><i>Returns:</i> <code>array</code></p>
<p>Ritorna, in forma di <i>array</i> con indici numerici, l'elenco dei <i>rights</i>
   posseduti dall'utente loggato.</p>]]></f></r>
<r><f>157</f><f><![CDATA[FUNCTION O2USER_ROLES]]></f><f><![CDATA[o2user_roles()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2user_roles()</code></p>
<p><i>Parameters:</i> La funzione non prevede parametri</p>
<p><i>Returns:</i> <code>array</code></p>
<p>Ritorna, in forma di <i>array</i> con indici numerici, l'elenco dei <i>roles</i>
   rivestiti dall'utente loggato, ovvero dei gruppi a cui appartiene.</p>]]></f></r>
<r><f>158</f><f><![CDATA[FUNCTION O2DBS_ENGINE]]></f><f><![CDATA[o2dbs_engine()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2dbs_engine($server_name)</code></p>
<p><i>Parameters:</i><ul>
                         <li><i>$server_name</i> nome del database server di cui si 
                             sta richiedendo l'informativa</li>
                     </ul></p>
<p><i>Returns:</i> <code>string</code></p>
<p>Ritorna il tipo di motore <em>SQL</em> ("sqlite", "mysql", "mssql", "postgres", "oracle", ...) per il server <i>$server_name</i>, così come definito alla voce <i>Engine</i> della definizione dei <i>Server</i>.</p>
]]></f></r>
<r><f>159</f><f><![CDATA[FUNCTION O2DBS_EXE]]></f><f><![CDATA[o2dbs_exe()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2dbs_exe($server_name, $sql_cmd)</code></p>
<p><i>Parameters:</i><ul>
                         <li><i>$server_name</i> nome del database server su cui si 
                             sta richiedendo l'esecuzione</li>
                         <li><i>$sql_cmd</i> comando <em>SQL</em> da eseguire sul
                             server</li>
                     </ul></p>
<p><i>Returns:</i> <code>boolean</code></p>
<p>Esegue il comando <em>SQL</em> <i>$sql_cmd</i> direttamente sul server 
   <i>$server_name</i> e ritorna "true" se eseguito correttamente.</p>
<p><h4>ATTENZIONE!</h4>
   Questa funzione può compromettere la portabilità dell'applicazione, in quanto la
   sintassi del comando <i>$sql_cmd</i> può variare da una tipologia di server ad
   un'altra. Si sconsiglia l'uso di questa funzione, a favore delle normali tecniche
   o2 di accesso e gestione delle connettività.</p>
]]></f></r>
<r><f>160</f><f><![CDATA[FUNCTION O2DBS_NAME]]></f><f><![CDATA[o2dbs_name()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2dbs_name($server_name)</code></p>
<p><i>Parameters:</i><ul>
                         <li><i>$server_name</i> nome del database server di cui si 
                             sta richiedendo l'informativa</li>
                     </ul></p>
<p><i>Returns:</i> <code>string</code></p>
<p>Ritorna il nome host o l'indirizzo IP del server <i>$server_name</i>, così come
   definito alla voce <i>Physical name</i> della definizione dei <i>Server</i>.</p>
]]></f></r>
<r><f>161</f><f><![CDATA[FUNCTION O2DBS_PASSWORD]]></f><f><![CDATA[o2dbs_password()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2dbs_password($server_name)</code></p>
<p><i>Parameters:</i><ul>
                         <li><i>$server_name</i> nome del database server di cui si 
                             sta richiedendo l'informativa</li>
                     </ul></p>
<p><i>Returns:</i> <code>string</code></p>
<p>Ritorna la password indicata per l'utente di accesso al server 
   <i>$server_name</i>, così come definita alla voce <i>Password</i> della 
   definizione dei <i>Server</i>.</p>]]></f></r>
<r><f>162</f><f><![CDATA[FUNCTION O2DBS_USER]]></f><f><![CDATA[o2dbs_user()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2dbs_user($server_name)</code></p>
<p><i>Parameters:</i><ul>
                         <li><i>$server_name</i> nome del database server di cui si 
                             sta richiedendo l'informativa</li>
                     </ul></p>
<p><i>Returns:</i> <code>string</code></p>
<p>Ritorna il nome dell'utente di accesso al server <i>$server_name</i>, così come definito alla voce <i>User</i> della definizione dei <i>Server</i>.</p>]]></f></r>
<r><f>163</f><f><![CDATA[FUNCTION O2DB_NAME]]></f><f><![CDATA[o2db_name()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2db_name($db_name)</code></p>
<p><i>Parameters:</i><ul>
                         <li><i>$db_name</i> nome del database di cui si sta 
                             richiedendo l'informativa</li>
                     </ul></p>
<p><i>Returns:</i> <code>string</code></p>
<p>Ritorna il nome fisico del database $db_name, come definito alla colonna 
   <i>Physical name</i> della definizione dei <i>Database</i>.</p>
]]></f></r>
<r><f>164</f><f><![CDATA[FUNCTION O2DB_SCHEMA]]></f><f><![CDATA[o2db_schema()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2db_schema($db_name)</code></p>
<p><i>Parameters:</i><ul>
                         <li><i>$db_name</i> nome del database di cui si sta 
                             richiedendo l'informativa</li>
                     </ul></p>
<p><i>Returns:</i> <code>string</code></p>
<p>Ritorna lo <i>schema</i> utilizzato per l'accesso al database $db_name, come
   definito alla colonna <i>Schema</i> della definizione dei <i>Database</i>.</p>
]]></f></r>
<r><f>165</f><f><![CDATA[FUNCTION O2DB_SERVER]]></f><f><![CDATA[o2db_server()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2db_server($db_name)</code></p>
<p><i>Parameters:</i><ul>
                         <li><i>$db_name</i> nome del database di cui si sta 
                             richiedendo l'informativa</li>
                     </ul></p>
<p><i>Returns:</i> <code>string</code></p>
<p>Ritorna il nome logico (o2) del server su cui è definito il database
   <i>$db_name</i>, come indicato nella colonna <i>Server</i> della definizione 
   dei <i>Database</i>.</p>
<p>Il nome logico di server ritornato da questa funzione può essere passato come 
   primo parametro alle funzioni <i>o2dbs_*()</i>.</p>
]]></f></r>
<r><f>166</f><f><![CDATA[FUNCTION O2DB_TABLES]]></f><f><![CDATA[o2db_tables()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2db_tables($db_name)</code></p>
<p><i>Parameters:</i><ul>
                         <li><i>$db_name</i> nome del database di cui si sta 
                             richiedendo l'informativa</li>
                     </ul></p>
<p><i>Returns:</i> <code>array</code></p>
<p>Ritorna l'elenco delle tabelle fisicamente esistenti sul database <i>$db_name</i>
   in forma di array con indici numerici.</p>

]]></f></r>
<r><f>167</f><f><![CDATA[FUNCTION O2DBS_COMMIT]]></f><f><![CDATA[o2dbs_commit()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2db_commit($server_name)</code></p>
<p><i>Parameters:</i><ul>
                         <li><i>$server_name</i> nome del server su cui si sta 
                             eseguendo il COMMIT</li>
                     </ul></p>
<p><i>Returns:</i> <code>boolean</code></p>
<p>Esegue il COMMIT <em>SQL</em> delle transazioni avviate sul server
   <i>$server_name</i>. Una nuova transazione verrà automaticamente avviata alla
   prossima richiesta di esecuzione per il server. Ritorna "true" se il COMMIT è 
   stato eseguito con successo.</p>]]></f></r>
<r><f>168</f><f><![CDATA[FUNCTION O2DIR_CREATE]]></f><f><![CDATA[o2dir_create()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2dir_create($dir_path)</code></p>
<p><i>Parameters:</i><ul>
                         <li><i>$dir_path</i> path della directory (comprensivo di 
                             "/" oppure "\" finale) che si vuole creare</li>
                     </ul></p>
<p><i>Returns:</i> <code>boolean</code></p>
<p>Crea la directory <i>$dir_path</i> su filesystem, se l'application server possiede le credenziali necessarie. Ritorna "true" se la creazione ha esito positivo.</p>
<p><h4>ATTENZIONE!</h4>
   Deve esistere la directory <var>[<i>$dir_path</i>]/..</var>.</p>
]]></f></r>
<r><f>169</f><f><![CDATA[FUNCTION O2DIR_DELETE]]></f><f><![CDATA[o2dir_delete()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2dir_delete($dir_path)</code></p>
<p><i>Parameters:</i><ul>
                         <li><i>$dir_path</i> path della directory (comprensivo di 
                             "/" oppure "\" finale) che si vuole eliminare</li>
                     </ul></p>
<p><i>Returns:</i> <code>boolean</code></p>
<p>Elimina la directory <i>$dir_path</i> su filesystem, tutti i file eventualmente
   contenuti e tutte le sottocartelle, se l'application server possiede le 
   credenziali necessarie. Ritorna "true" se l'eliminazione ha esito positivo.</p>]]></f></r>
<r><f>170</f><f><![CDATA[FUNCTION O2DIR_LIST]]></f><f><![CDATA[o2dir_list()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2dir_list($dir_path, [$file_match="*"])</code></p>
<p><i>Parameters:</i><ul>
                         <li><i>$dir_path</i> path della directory (comprensivo di 
                             "/" oppure "\" finale) di cui si richiede il
                             contenuto</li>
                         <li><i>$file_match</i> (optional) espressione regolare di
                             filesystem (<em>CMD</em> o <em>SHELL</em> wild-card
                             expression) per il filtraggio dei file (default "*",
                             <i>tutti i file</i>)</li>
                     </ul></p>
<p><i>Returns:</i> <code>array</code></p>
<p>Ritorna il contenuto della directory <i>$dir_path</i> su filesystem, in accordo 
   con l'espressione <i>$file_match</i> eventualmente passata, come array con
   indice numerico. I valori contenuti nei singoli elementi dell'array 
   corrispondono al path completo dei file e delle cartelle contenute.</p>
<p><h4>Sample</h4>
   <code>$list_local = o2dir_list(o2app_dir_home());</code><br>
   Assumendo che la home dell'applicazione sia la directory 
   <var>/o2app/myapp/</var>, <i>$list_local</i> potrebbe avere la seguente
   forma:<br>
   <code>Array</code><br>
   <code>(</code><br>
   &nbsp; <code>[0] => /o2app/myapp/data</code><br>
   &nbsp; <code>[1] => /o2app/myapp/doc</code><br>
   &nbsp; <code>[2] => /o2app/myapp/htdocs</code><br>
   &nbsp; <code>[3] => /o2app/myapp/logs</code><br>
   &nbsp; <code>[4] => /o2app/myapp/models</code><br>
   &nbsp; <code>[5] => /o2app/myapp/myapp.ini</code><br>
   &nbsp; <code>[6] => /o2app/myapp/prgs</code><br>
   &nbsp; <code>[7] => /o2app/myapp/users</code><br>
   <code>)</code><br></p>
]]></f></r>
<r><f>171</f><f><![CDATA[FUNCTION O2FILE_BASENAME]]></f><f><![CDATA[o2file_basename()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2file_basename($file_path)</code></p>
<p><i>Parameters:</i><ul>
                         <li><i>$file_path</i> path del file di cui si richiede
                             l'informativa</li>
                     </ul></p>
<p><i>Returns:</i> <code>string</code></p>
<p>Ritorna il solo nome, privo di path ed estensione, del file <i>$file_path</i>.</p>
<p><h4>Sample</h4>
   <code>$name_local = o2file_basename("c:\programmi\php5\php.exe");</code><br>
   <i>$name_local</i> conterrà la stringa "php".</p>]]></f></r>
<r><f>172</f><f><![CDATA[FUNCTION O2FILE_COPY]]></f><f><![CDATA[o2file_copy()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2file_copy($file_path, $new_file)</code></p>
<p><i>Parameters:</i><ul>
                         <li><i>$file_path</i> path del file sorgente che si 
                             intende copiare</li>
                         <li><i>$new_file</i> path del file destinazione su cui si 
                             intende copiare</li>
                     </ul></p>
<p><i>Returns:</i> <code>boolean</code></p>
<p>Copia il file <i>$file_path</i> sul file <i>$new_file</i>, sovrascrivendolo se 
   già esistente.</p>
<p><h4>ATTENZIONE!</h4>
   Il file <i>$file_path</i> e la directory <var>[<i>$new_file</i>]/..</var> 
   devono esistere.</p>]]></f></r>
<r><f>173</f><f><![CDATA[FUNCTION O2FILE_DATE]]></f><f><![CDATA[o2file_date()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2file_date($file_path)</code></p>
<p><i>Parameters:</i><ul>
                         <li><i>$file_path</i> path del file di cui si richiede
                             l'informativa</li>
                     </ul></p>
<p><i>Returns:</i> <code>string</code></p>
<p>Ritorna la data di ultima modifica del file <i>$file_path</i> nella forma
   <code>YYYYMMDD</code>.</p>
<p><h4>Sample</h4>
   <code>$date_local = o2file_date("c:\programmi\php5\php.exe");</code><br>
   <i>$date_local</i> conterrà la stringa "20060816".</p>]]></f></r>
<r><f>174</f><f><![CDATA[FUNCTION O2FILE_DELETE]]></f><f><![CDATA[o2file_delete()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2file_delete($file_path)</code></p>
<p><i>Parameters:</i><ul>
                         <li><i>$file_path</i> path del file che si vuole
                             eliminare</li>
                     </ul></p>
<p><i>Returns:</i> <code>boolean</code></p>
<p>Elimina il file <i>$file_path</i> su filesystem, se l'application server possiede
   le credenziali necessarie. Ritorna "true" se l'eliminazione ha esito positivo.</p>]]></f></r>
<r><f>175</f><f><![CDATA[FUNCTION O2FILE_DIR]]></f><f><![CDATA[o2file_dir()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2file_dir($file_path)</code></p>
<p><i>Parameters:</i><ul>
                         <li><i>$file_path</i> path del file di cui si richiede
                             l'informativa</li>
                     </ul></p>
<p><i>Returns:</i> <code>string</code></p>
<p>Ritorna il solo path del file <i>$file_path</i>.</p>
<p><h4>Sample</h4>
   <code>$dir_local = o2file_dir("c:\programmi\php5\php.exe");</code><br>
   <i>$dir_local</i> conterrà la stringa "c:\programmi\php5\".</p>]]></f></r>
<r><f>176</f><f><![CDATA[FUNCTION O2FILE_EXISTS]]></f><f><![CDATA[o2file_exists()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2file_exists($file_path)</code></p>
<p><i>Parameters:</i><ul>
                         <li><i>$file_path</i> path del file di cui si vuole
                             controllare l'esistenza</li>
                     </ul></p>
<p><i>Returns:</i> <code>boolean</code></p>
<p>Verifica se esiste il file <i>$file_path</i> su filesystem e ritorna "true" se
   esiste, altrimenti "false".</p>]]></f></r>
<r><f>177</f><f><![CDATA[FUNCTION O2FILE_EXT]]></f><f><![CDATA[o2file_ext()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2file_ext($file_path)</code></p>
<p><i>Parameters:</i><ul>
                         <li><i>$file_path</i> path del file di cui si richiede
                             l'informativa</li>
                     </ul></p>
<p><i>Returns:</i> <code>string</code></p>
<p>Ritorna la sola estensione (la stringa a destra dell'ultimo "." contenuto nel 
   nome) del file <i>$file_path</i>.</p>
<p><h4>Sample</h4>
   <code>$ext_local = o2file_ext("c:\programmi\php5\php.exe");</code><br>
   <i>$ext_local</i> conterrà la stringa "exe".</p>]]></f></r>
<r><f>178</f><f><![CDATA[FUNCTION O2FILE_FULLNAME]]></f><f><![CDATA[o2file_fullname()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2file_fullname($file_path)</code></p>
<p><i>Parameters:</i><ul>
                         <li><i>$file_path</i> path del file di cui si richiede
                             l'informativa</li>
                     </ul></p>
<p><i>Returns:</i> <code>string</code></p>
<p>Ritorna il nome completo, con path esplicito e ben formato, del file
   <i>$file_path</i>.</p>
<p><h4>Sample</h4>
   <code>$file_local = o2file_fullname("c:\programmi\php5\php.exe");</code><br>
   <i>$file_local</i> conterrà la stringa "c:\programmi\php5\php.exe".</p>]]></f></r>
<r><f>179</f><f><![CDATA[FUNCTION O2FILE_ICO]]></f><f><![CDATA[o2file_ico()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2file_ico($file_path, [$large=false])</code></p>
<p><i>Parameters:</i><ul>
                         <li><i>$file_path</i> path del file per il quale si 
                             richiede l'icona</li>
                         <li><i>$large</i> (optional) valore logico (default "false")
                             usato per richiedere icone in formato 256x256 px anziché
                             16x16 px</li>
                     </ul></p>
<p><i>Returns:</i> <code>string</code></p>
<p>Ritorna il puntamento web all'immagine icona appropriata per la tipologia di 
   file di <i>$file_path</i>, cercando di ricavare la tipologia dal MIME-TYPE del
   file (quando possibile) o dalla sua estensione. Se viene passato a "true" il
   secondo parametro <i>$large</i> verrà ritornato il puntamento all'icona in 
   formato <em>PNG</em> 256x256 px, altrimenti il puntamento all'icona <em>PNG</em>
   16x16 px.</p>
<p><h4>Sample</h4>
   <code>$ico_local = o2file_ico("c:\programmi\php5\php.exe");</code><br>
   <i>$ico_local</i> conterrà la stringa "/o2/img/fs/exe.png".</p>]]></f></r>
<r><f>180</f><f><![CDATA[FUNCTION O2FILE_RENAME]]></f><f><![CDATA[o2file_rename()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2file_rename($file_path, $new_name)</code></p>
<p><i>Parameters:</i><ul>
                         <li><i>$file_path</i> path del file sorgente che si 
                             intende rinomiare</li>
                         <li><i>$new_name</i> path del file destinazione con cui 
                             si intende rinominare</li>
                     </ul></p>
<p><i>Returns:</i> <code>boolean</code></p>
<p>Rinomina il file <i>$file_path</i> col nome file <i>$new_name</i>, 
   sovrascrivendolo se già esistente.</p>
<p><h4>ATTENZIONE!</h4>
   Il file <i>$file_path</i> e la directory <var>[<i>$new_name</i>]/..</var> 
   devono esistere.</p>]]></f></r>
<r><f>181</f><f><![CDATA[FUNCTION O2FILE_SIZE]]></f><f><![CDATA[o2file_size()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2file_size($file_path)</code></p>
<p><i>Parameters:</i><ul>
                         <li><i>$file_path</i> path del file di cui si richiede
                             l'informativa</li>
                     </ul></p>
<p><i>Returns:</i> <code>integer</code></p>
<p>Ritorna la dimensione in byte del file <i>$file_path</i>.</p>
<p><h4>Sample</h4>
   <code>$size_local = o2file_size("c:\programmi\php5\php.exe");</code><br>
   <i>$size_local</i> conterrà il valore "28725".</p>]]></f></r>
<r><f>182</f><f><![CDATA[FUNCTION O2FILE_TIME]]></f><f><![CDATA[o2file_time()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2file_time($file_path)</code></p>
<p><i>Parameters:</i><ul>
                         <li><i>$file_path</i> path del file di cui si richiede
                             l'informativa</li>
                     </ul></p>
<p><i>Returns:</i> <code>string</code></p>
<p>Ritorna l'ora di ultima modifica del file <i>$file_path</i> nella forma
   <code>HHMMSS</code>.</p>
<p><h4>Sample</h4>
   <code>$time_local = o2file_time("c:\programmi\php5\php.exe");</code><br>
   <i>$time_local</i> conterrà la stringa "003422".</p>]]></f></r>
<r><f>183</f><f><![CDATA[FUNCTION O2FILE_TYPE]]></f><f><![CDATA[o2file_type()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2file_type($file_path)</code></p>
<p><i>Parameters:</i><ul>
                         <li><i>$file_path</i> path del file di cui si richiede
                             l'informativa</li>
                     </ul></p>
<p><i>Returns:</i> <code>string</code></p>
<p>Ritorna "D" se il file <i>$file_path</i> è una directory, altrimenti "F".</p>
<p><h4>Sample</h4>
   <code>$ype_local = o2file_type("c:\programmi\php5\php.exe");</code><br>
   <i>$type_local</i> conterrà la stringa "F".</p>]]></f></r>
<r><f>184</f><f><![CDATA[FUNZIONI DI DATAMODEL]]></f><f><![CDATA[Funzioni di datamodel]]></f><f></f></r>
<r><f>185</f><f><![CDATA[FUNCTION O2APP_DIR_CSS]]></f><f><![CDATA[o2app_dir_css()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2app_dir_css()</code></p>
<p><i>Parameters:</i> La funzione non prevede parametri</p>
<p><i>Returns:</i> <code>string</code></p>
<p>Ritorna il path completo alla cartella contenente i CSS (<em>Cascading Style Sheet</em>) dell'applicazione.</p>]]></f></r>
<r><f>186</f><f><![CDATA[FUNZIONE O2APP_DIR_CVSPRGS]]></f><f><![CDATA[o2app_dir_cvsprgs()]]></f><f><![CDATA[<p><i>Sintassi:</i> <code>o2app_dir_cvsprgs()</code></p>
<p><i>Parameters:</i> La funzione non prevede parametri</p>
<p><i>Returns:</i> <code>string</code></p>
<p>Ritorna il path completo all'attuale cartella di CVS (<i>Team development</i>), contenente i programmi e i <i>repository</i> attualmente in <i>check out</i> per lo sviluppatore indicato alla runtime.</p>]]></f></r>
</rset>
<!-- Total 167264 bytes wrote -->